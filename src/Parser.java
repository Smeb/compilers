
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\005\000\002\005" +
    "\007\000\002\006\004\000\002\006\002\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\006\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\003\005\000\002\003\002\000\002\053\003\000\002\053" +
    "\004\000\002\054\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\012\013\000" +
    "\002\011\006\000\002\011\004\000\002\010\005\000\002" +
    "\010\003\000\002\013\007\000\002\014\005\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\052\010" +
    "\000\002\052\007\000\002\052\007\000\002\052\006\000" +
    "\002\050\003\000\002\050\003\000\002\043\005\000\002" +
    "\051\006\000\002\051\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\025\004\000\002\025\006\000\002\025\004\000\002" +
    "\025\005\000\002\025\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\003\000\002\025" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\026\006\000\002\022\006\000\002\022\006" +
    "\000\002\027\005\000\002\030\003\000\002\030\002\000" +
    "\002\031\003\000\002\031\005\000\002\021\010\000\002" +
    "\032\005\000\002\033\003\000\002\033\002\000\002\034" +
    "\005\000\002\034\007\000\002\035\003\000\002\035\002" +
    "\000\002\036\005\000\002\036\003\000\002\037\004\000" +
    "\002\037\004\000\002\040\011\000\002\041\013\000\002" +
    "\041\013\000\002\045\013\000\002\046\011\000\002\046" +
    "\002\000\002\047\004\000\002\047\002\000\002\044\004" +
    "\000\002\044\003\000\002\042\004\000\002\042\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\034\017\ufff4\021\005\022\007\023\010\033" +
    "\030\034\016\035\012\036\021\037\026\040\006\041\025" +
    "\042\020\064\014\001\002\000\004\020\346\001\002\000" +
    "\024\033\030\035\012\036\021\037\026\040\006\041\025" +
    "\042\020\043\333\064\335\001\002\000\010\006\uffba\011" +
    "\uffba\064\uffba\001\002\000\004\064\317\001\002\000\020" +
    "\033\030\035\012\036\021\037\026\040\006\041\025\042" +
    "\020\001\002\000\010\006\uffb2\011\uffb2\064\uffb2\001\002" +
    "\000\010\006\uffbd\011\uffbd\064\uffbd\001\002\000\010\006" +
    "\uffb7\011\uffb7\064\uffb7\001\002\000\010\006\uffb1\011\uffb1" +
    "\064\uffb1\001\002\000\004\002\314\001\002\000\010\006" +
    "\uffb3\011\uffb3\064\uffb3\001\002\000\004\020\ufff0\001\002" +
    "\000\010\006\uffb8\011\uffb8\064\uffb8\001\002\000\010\006" +
    "\uffbc\011\uffbc\064\uffbc\001\002\000\004\020\uffef\001\002" +
    "\000\004\017\204\001\002\000\004\020\uffed\001\002\000" +
    "\010\006\uffb9\011\uffb9\064\uffb9\001\002\000\004\005\176" +
    "\001\002\000\010\006\uffbb\011\uffbb\064\uffbb\001\002\000" +
    "\004\005\171\001\002\000\004\020\uffee\001\002\000\004" +
    "\064\033\001\002\000\006\020\uffea\056\034\001\002\000" +
    "\034\007\047\012\045\015\046\025\057\026\040\027\051" +
    "\030\060\031\064\032\050\051\056\062\041\063\061\064" +
    "\042\001\002\000\052\005\uffe3\010\uffe3\011\uffe3\013\uffe3" +
    "\014\uffe3\016\uffe3\020\uffe3\044\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3" +
    "\057\uffe3\060\uffe3\061\uffe3\001\002\000\006\011\167\020" +
    "\uffeb\001\002\000\056\005\uffdd\007\154\010\uffdd\011\uffdd" +
    "\013\uffdd\014\uffdd\016\uffdd\020\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\001\002\000" +
    "\052\005\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\016\uffd9" +
    "\020\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\001\002\000\034\007\047\012\045\015\046\025" +
    "\057\026\040\027\051\030\060\031\064\032\050\051\056" +
    "\062\041\063\061\064\042\001\002\000\060\005\uffda\007" +
    "\uffda\010\uffda\011\uffda\013\uffda\014\uffda\015\150\016\uffda" +
    "\020\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051" +
    "\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda" +
    "\060\uffda\061\uffda\001\002\000\054\005\uffde\010\uffde\011" +
    "\uffde\013\uffde\014\uffde\016\uffde\020\uffde\044\uffde\045\uffde" +
    "\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054" +
    "\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\001\002" +
    "\000\052\005\uffcd\010\uffcd\011\uffcd\013\uffcd\014\uffcd\016" +
    "\uffcd\020\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\001\002\000\036\007\047\012\045\013\uffa5" +
    "\015\046\025\057\026\040\027\051\030\060\031\064\032" +
    "\050\051\056\062\041\063\061\064\042\001\002\000\034" +
    "\007\047\012\045\015\046\025\057\026\040\027\051\030" +
    "\060\031\064\032\050\051\056\062\041\063\061\064\042" +
    "\001\002\000\036\007\047\010\uffab\012\045\015\046\025" +
    "\057\026\040\027\051\030\060\031\064\032\050\051\056" +
    "\062\041\063\061\064\042\001\002\000\052\005\uffd4\010" +
    "\uffd4\011\uffd4\013\uffd4\014\uffd4\016\uffd4\020\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\055\uffd4\057\uffd4\060\uffd4\061\uffd4\001\002" +
    "\000\052\005\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8\016" +
    "\uffd8\020\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\057\uffd8\060" +
    "\uffd8\061\uffd8\001\002\000\042\005\075\011\uffe8\020\uffe8" +
    "\044\070\045\102\046\077\047\073\050\105\051\071\052" +
    "\074\053\076\054\106\055\100\057\072\060\101\061\104" +
    "\001\002\000\052\005\uffbe\010\uffbe\011\uffbe\013\uffbe\014" +
    "\uffbe\016\uffbe\020\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\057" +
    "\uffbe\060\uffbe\061\uffbe\001\002\000\052\005\uffd3\010\uffd3" +
    "\011\uffd3\013\uffd3\014\uffd3\016\uffd3\020\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\057\uffd3\060\uffd3\061\uffd3\001\002\000" +
    "\052\005\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\016\uffe4" +
    "\020\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051" +
    "\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\057\uffe4\060\uffe4" +
    "\061\uffe4\001\002\000\034\007\047\012\045\015\046\025" +
    "\057\026\040\027\051\030\060\031\064\032\050\051\056" +
    "\062\041\063\061\064\042\001\002\000\052\005\uffd5\010" +
    "\uffd5\011\uffd5\013\uffd5\014\uffd5\016\uffd5\020\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\054\uffd5\055\uffd5\057\uffd5\060\uffd5\061\uffd5\001\002" +
    "\000\052\005\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7\016" +
    "\uffd7\020\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\001\002\000\004\015\066\001\002\000\052" +
    "\005\uffbf\010\uffbf\011\uffbf\013\uffbf\014\uffbf\016\uffbf\020" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\057\uffbf\060\uffbf\061" +
    "\uffbf\001\002\000\052\005\uffd2\010\uffd2\011\uffd2\013\uffd2" +
    "\014\uffd2\016\uffd2\020\uffd2\044\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\001\002\000\052\005\uffd6\010" +
    "\uffd6\011\uffd6\013\uffd6\014\uffd6\016\uffd6\020\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\057\uffd6\060\uffd6\061\uffd6\001\002" +
    "\000\052\005\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5\016" +
    "\uffe5\020\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\057\uffe5\060" +
    "\uffe5\061\uffe5\001\002\000\034\007\047\012\045\015\046" +
    "\025\057\026\040\027\051\030\060\031\064\032\050\051" +
    "\056\062\041\063\061\064\042\001\002\000\040\005\075" +
    "\016\103\044\070\045\102\046\077\047\073\050\105\051" +
    "\071\052\074\053\076\054\106\055\100\057\072\060\101" +
    "\061\104\001\002\000\034\007\047\012\045\015\046\025" +
    "\057\026\040\027\051\030\060\031\064\032\050\051\056" +
    "\062\041\063\061\064\042\001\002\000\034\007\047\012" +
    "\045\015\046\025\057\026\040\027\051\030\060\031\064" +
    "\032\050\051\056\062\041\063\061\064\042\001\002\000" +
    "\034\007\047\012\045\015\046\025\057\026\040\027\051" +
    "\030\060\031\064\032\050\051\056\062\041\063\061\064" +
    "\042\001\002\000\034\007\047\012\045\015\046\025\057" +
    "\026\040\027\051\030\060\031\064\032\050\051\056\062" +
    "\041\063\061\064\042\001\002\000\034\007\047\012\045" +
    "\015\046\025\057\026\040\027\051\030\060\031\064\032" +
    "\050\051\056\062\041\063\061\064\042\001\002\000\034" +
    "\007\047\012\045\015\046\025\057\026\040\027\051\030" +
    "\060\031\064\032\050\051\056\062\041\063\061\064\042" +
    "\001\002\000\034\007\047\012\045\015\046\025\057\026" +
    "\040\027\051\030\060\031\064\032\050\051\056\062\041" +
    "\063\061\064\042\001\002\000\034\007\047\012\045\015" +
    "\046\025\057\026\040\027\051\030\060\031\064\032\050" +
    "\051\056\062\041\063\061\064\042\001\002\000\034\007" +
    "\047\012\045\015\046\025\057\026\040\027\051\030\060" +
    "\031\064\032\050\051\056\062\041\063\061\064\042\001" +
    "\002\000\004\064\113\001\002\000\034\007\047\012\045" +
    "\015\046\025\057\026\040\027\051\030\060\031\064\032" +
    "\050\051\056\062\041\063\061\064\042\001\002\000\052" +
    "\005\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0\016\uffd0\020" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\001\002\000\034\007\047\012\045\015\046\025\057" +
    "\026\040\027\051\030\060\031\064\032\050\051\056\062" +
    "\041\063\061\064\042\001\002\000\034\007\047\012\045" +
    "\015\046\025\057\026\040\027\051\030\060\031\064\032" +
    "\050\051\056\062\041\063\061\064\042\001\002\000\034" +
    "\007\047\012\045\015\046\025\057\026\040\027\051\030" +
    "\060\031\064\032\050\051\056\062\041\063\061\064\042" +
    "\001\002\000\052\005\075\010\uffc3\011\uffc3\013\uffc3\014" +
    "\uffc3\016\uffc3\020\uffc3\044\070\045\102\046\077\047\073" +
    "\050\105\051\uffc3\052\074\053\076\054\uffc3\055\uffc3\057" +
    "\072\060\uffc3\061\uffc3\001\002\000\042\010\uffc7\011\uffc7" +
    "\013\uffc7\014\uffc7\016\uffc7\020\uffc7\044\uffc7\045\uffc7\047" +
    "\uffc7\051\uffc7\052\uffc7\054\uffc7\055\uffc7\057\uffc7\060\uffc7" +
    "\061\uffc7\001\002\000\052\005\075\010\uffc0\011\uffc0\013" +
    "\uffc0\014\uffc0\016\uffc0\020\uffc0\044\070\045\102\046\077" +
    "\047\073\050\105\051\uffc0\052\074\053\076\054\uffc0\055" +
    "\uffc0\057\072\060\uffc0\061\uffc0\001\002\000\052\005\075" +
    "\010\uffcb\011\uffcb\013\uffcb\014\uffcb\016\uffcb\020\uffcb\044" +
    "\uffcb\045\uffcb\046\077\047\073\050\105\051\uffcb\052\uffcb" +
    "\053\076\054\uffcb\055\uffcb\057\072\060\uffcb\061\uffcb\001" +
    "\002\000\054\005\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc" +
    "\016\uffdc\020\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc" +
    "\057\uffdc\060\uffdc\061\uffdc\001\002\000\052\005\075\010" +
    "\uffc2\011\uffc2\013\uffc2\014\uffc2\016\uffc2\020\uffc2\044\070" +
    "\045\102\046\077\047\073\050\105\051\uffc2\052\074\053" +
    "\076\054\uffc2\055\uffc2\057\072\060\uffc2\061\uffc2\001\002" +
    "\000\042\010\uffca\011\uffca\013\uffca\014\uffca\016\uffca\020" +
    "\uffca\044\uffca\045\uffca\047\uffca\051\uffca\052\uffca\054\uffca" +
    "\055\uffca\057\uffca\060\uffca\061\uffca\001\002\000\042\010" +
    "\uffc4\011\uffc4\013\uffc4\014\uffc4\016\uffc4\020\uffc4\044\uffc4" +
    "\045\uffc4\047\uffc4\051\uffc4\052\uffc4\054\uffc4\055\uffc4\057" +
    "\uffc4\060\uffc4\061\uffc4\001\002\000\042\010\uffc8\011\uffc8" +
    "\013\uffc8\014\uffc8\016\uffc8\020\uffc8\044\uffc8\045\uffc8\047" +
    "\uffc8\051\uffc8\052\uffc8\054\uffc8\055\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\001\002\000\052\005\075\010\uffc5\011\uffc5\013" +
    "\uffc5\014\uffc5\016\uffc5\020\uffc5\044\uffc5\045\uffc5\046\077" +
    "\047\073\050\105\051\uffc5\052\uffc5\053\076\054\uffc5\055" +
    "\uffc5\057\072\060\uffc5\061\uffc5\001\002\000\052\005\075" +
    "\010\uffc9\011\uffc9\013\uffc9\014\uffc9\016\uffc9\020\uffc9\044" +
    "\uffc9\045\uffc9\046\077\047\073\050\105\051\uffc9\052\uffc9" +
    "\053\076\054\uffc9\055\uffc9\057\072\060\uffc9\061\uffc9\001" +
    "\002\000\052\005\075\010\uffc1\011\uffc1\013\uffc1\014\uffc1" +
    "\016\uffc1\020\uffc1\044\uffc1\045\uffc1\046\077\047\073\050" +
    "\105\051\uffc1\052\uffc1\053\076\054\uffc1\055\uffc1\057\072" +
    "\060\uffc1\061\uffc1\001\002\000\052\005\075\010\uffc6\011" +
    "\uffc6\013\uffc6\014\uffc6\016\uffc6\020\uffc6\044\070\045\102" +
    "\046\077\047\073\050\105\051\uffc6\052\074\053\076\054" +
    "\uffc6\055\uffc6\057\072\060\uffc6\061\uffc6\001\002\000\052" +
    "\005\075\010\uffcc\011\uffcc\013\uffcc\014\uffcc\016\uffcc\020" +
    "\uffcc\044\uffcc\045\uffcc\046\077\047\073\050\105\051\uffcc" +
    "\052\uffcc\053\076\054\uffcc\055\uffcc\057\072\060\uffcc\061" +
    "\uffcc\001\002\000\052\005\075\010\uffcf\011\uffcf\013\uffcf" +
    "\014\uffcf\016\uffcf\020\uffcf\044\070\045\102\046\077\047" +
    "\073\050\105\051\uffcf\052\074\053\076\054\uffcf\055\uffcf" +
    "\057\072\060\uffcf\061\uffcf\001\002\000\010\010\uffac\011" +
    "\132\016\uffac\001\002\000\044\005\075\010\uffaa\011\uffaa" +
    "\016\uffaa\044\070\045\102\046\077\047\073\050\105\051" +
    "\071\052\074\053\076\054\106\055\100\057\072\060\101" +
    "\061\104\001\002\000\004\010\131\001\002\000\052\005" +
    "\uffad\010\uffad\011\uffad\013\uffad\014\uffad\016\uffad\020\uffad" +
    "\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052" +
    "\uffad\053\uffad\054\uffad\055\uffad\057\uffad\060\uffad\061\uffad" +
    "\001\002\000\034\007\047\012\045\015\046\025\057\026" +
    "\040\027\051\030\060\031\064\032\050\051\056\062\041" +
    "\063\061\064\042\001\002\000\044\005\075\010\uffa9\011" +
    "\uffa9\016\uffa9\044\070\045\102\046\077\047\073\050\105" +
    "\051\071\052\074\053\076\054\106\055\100\057\072\060" +
    "\101\061\104\001\002\000\040\005\075\016\135\044\070" +
    "\045\102\046\077\047\073\050\105\051\071\052\074\053" +
    "\076\054\106\055\100\057\072\060\101\061\104\001\002" +
    "\000\052\005\uffce\010\uffce\011\uffce\013\uffce\014\uffce\016" +
    "\uffce\020\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\057\uffce\060" +
    "\uffce\061\uffce\001\002\000\040\005\075\014\146\044\070" +
    "\045\102\046\077\047\073\050\105\051\071\052\074\053" +
    "\076\054\106\055\100\057\072\060\101\061\104\001\002" +
    "\000\004\013\145\001\002\000\006\011\141\013\uffa6\001" +
    "\002\000\034\007\047\012\045\015\046\025\057\026\040" +
    "\027\051\030\060\031\064\032\050\051\056\062\041\063" +
    "\061\064\042\001\002\000\040\005\075\014\143\044\070" +
    "\045\102\046\077\047\073\050\105\051\071\052\074\053" +
    "\076\054\106\055\100\057\072\060\101\061\104\001\002" +
    "\000\034\007\047\012\045\015\046\025\057\026\040\027" +
    "\051\030\060\031\064\032\050\051\056\062\041\063\061" +
    "\064\042\001\002\000\042\005\075\011\uffa3\013\uffa3\044" +
    "\070\045\102\046\077\047\073\050\105\051\071\052\074" +
    "\053\076\054\106\055\100\057\072\060\101\061\104\001" +
    "\002\000\052\005\uffa7\010\uffa7\011\uffa7\013\uffa7\014\uffa7" +
    "\016\uffa7\020\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\057\uffa7" +
    "\060\uffa7\061\uffa7\001\002\000\034\007\047\012\045\015" +
    "\046\025\057\026\040\027\051\030\060\031\064\032\050" +
    "\051\056\062\041\063\061\064\042\001\002\000\042\005" +
    "\075\011\uffa4\013\uffa4\044\070\045\102\046\077\047\073" +
    "\050\105\051\071\052\074\053\076\054\106\055\100\057" +
    "\072\060\101\061\104\001\002\000\036\007\047\012\045" +
    "\015\046\016\uffab\025\057\026\040\027\051\030\060\031" +
    "\064\032\050\051\056\062\041\063\061\064\042\001\002" +
    "\000\004\016\152\001\002\000\052\005\uffb0\010\uffb0\011" +
    "\uffb0\013\uffb0\014\uffb0\016\uffb0\020\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\055\uffb0\057\uffb0\060\uffb0\061\uffb0\001\002\000\042" +
    "\010\uffd1\011\uffd1\013\uffd1\014\uffd1\016\uffd1\020\uffd1\044" +
    "\uffd1\045\uffd1\047\uffd1\051\uffd1\052\uffd1\054\uffd1\055\uffd1" +
    "\057\uffd1\060\uffd1\061\uffd1\001\002\000\036\007\047\012" +
    "\045\014\155\015\046\025\057\026\040\027\051\030\060" +
    "\031\064\032\050\051\056\062\041\063\061\064\042\001" +
    "\002\000\036\007\047\010\164\012\045\015\046\025\057" +
    "\026\040\027\051\030\060\031\064\032\050\051\056\062" +
    "\041\063\061\064\042\001\002\000\042\005\075\010\160" +
    "\014\157\044\070\045\102\046\077\047\073\050\105\051" +
    "\071\052\074\053\076\054\106\055\100\057\072\060\101" +
    "\061\104\001\002\000\036\007\047\010\161\012\045\015" +
    "\046\025\057\026\040\027\051\030\060\031\064\032\050" +
    "\051\056\062\041\063\061\064\042\001\002\000\056\005" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb\016\uffdb" +
    "\020\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\001\002\000\052\005\uffe0\010\uffe0\011" +
    "\uffe0\013\uffe0\014\uffe0\016\uffe0\020\uffe0\044\uffe0\045\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\057\uffe0\060\uffe0\061\uffe0\001\002\000\040" +
    "\005\075\010\163\044\070\045\102\046\077\047\073\050" +
    "\105\051\071\052\074\053\076\054\106\055\100\057\072" +
    "\060\101\061\104\001\002\000\052\005\uffe2\010\uffe2\011" +
    "\uffe2\013\uffe2\014\uffe2\016\uffe2\020\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054" +
    "\uffe2\055\uffe2\057\uffe2\060\uffe2\061\uffe2\001\002\000\052" +
    "\005\uffdf\010\uffdf\011\uffdf\013\uffdf\014\uffdf\016\uffdf\020" +
    "\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\053\uffdf\054\uffdf\055\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\001\002\000\040\005\075\010\166\044\070\045\102" +
    "\046\077\047\073\050\105\051\071\052\074\053\076\054" +
    "\106\055\100\057\072\060\101\061\104\001\002\000\052" +
    "\005\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\016\uffe1\020" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\055\uffe1\057\uffe1\060\uffe1\061" +
    "\uffe1\001\002\000\034\007\047\012\045\015\046\025\057" +
    "\026\040\027\051\030\060\031\064\032\050\051\056\062" +
    "\041\063\061\064\042\001\002\000\042\005\075\011\uffe9" +
    "\020\uffe9\044\070\045\102\046\077\047\073\050\105\051" +
    "\071\052\074\053\076\054\106\055\100\057\072\060\101" +
    "\061\104\001\002\000\024\033\030\034\016\035\012\036" +
    "\021\037\026\040\006\041\025\042\020\064\173\001\002" +
    "\000\004\006\175\001\002\000\004\006\174\001\002\000" +
    "\010\006\uffae\011\uffae\064\uffae\001\002\000\010\006\uffaf" +
    "\011\uffaf\064\uffaf\001\002\000\024\033\030\034\016\035" +
    "\012\036\021\037\026\040\006\041\025\042\020\064\014" +
    "\001\002\000\004\011\200\001\002\000\024\033\030\034" +
    "\016\035\012\036\021\037\026\040\006\041\025\042\020" +
    "\064\014\001\002\000\004\006\202\001\002\000\010\006" +
    "\uffa8\011\uffa8\064\uffa8\001\002\000\034\002\ufff4\021\005" +
    "\022\007\023\010\033\030\034\016\035\012\036\021\037" +
    "\026\040\006\041\025\042\020\064\014\001\002\000\004" +
    "\012\205\001\002\000\070\007\047\012\045\015\046\024" +
    "\215\025\057\026\040\027\051\030\060\031\064\032\050" +
    "\033\030\034\016\035\012\036\021\037\026\040\006\041" +
    "\025\042\020\051\056\062\041\063\061\064\227\065\211" +
    "\072\223\073\206\076\226\077\221\001\002\000\004\015" +
    "\276\001\002\000\004\020\274\001\002\000\004\020\273" +
    "\001\002\000\004\015\253\001\002\000\004\013\251\001" +
    "\002\000\040\005\075\020\250\044\070\045\102\046\077" +
    "\047\073\050\105\051\071\052\074\053\076\054\106\055" +
    "\100\057\072\060\101\061\104\001\002\000\052\007\ufffd" +
    "\012\ufffd\013\ufffd\015\ufffd\024\ufffd\025\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\031\ufffd\032\ufffd\051\ufffd\062\ufffd\063\ufffd" +
    "\064\ufffd\065\ufffd\072\ufffd\073\ufffd\076\ufffd\077\ufffd\001" +
    "\002\000\036\007\047\012\045\015\046\020\uff93\025\057" +
    "\026\040\027\051\030\060\031\064\032\050\051\056\062" +
    "\041\063\061\064\042\001\002\000\042\005\uffe3\020\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\056\243\057\uffe3\060\uffe3" +
    "\061\uffe3\001\002\000\062\007\ufff7\012\ufff7\013\ufff7\015" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\032\ufff7\051\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066" +
    "\ufff7\067\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\076\ufff7" +
    "\077\ufff7\001\002\000\062\007\ufff8\012\ufff8\013\ufff8\015" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\051\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066" +
    "\ufff8\067\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\076\ufff8" +
    "\077\ufff8\001\002\000\034\007\047\012\045\015\046\025" +
    "\057\026\040\027\051\030\060\031\064\032\050\051\056" +
    "\062\041\063\061\064\042\001\002\000\062\007\ufff6\012" +
    "\ufff6\013\ufff6\015\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6" +
    "\030\ufff6\031\ufff6\032\ufff6\051\ufff6\062\ufff6\063\ufff6\064" +
    "\ufff6\065\ufff6\066\ufff6\067\ufff6\071\ufff6\072\ufff6\073\ufff6" +
    "\074\ufff6\076\ufff6\077\ufff6\001\002\000\004\015\232\001" +
    "\002\000\004\013\ufff3\001\002\000\004\020\231\001\002" +
    "\000\034\007\047\012\045\015\046\025\057\026\040\027" +
    "\051\030\060\031\064\032\050\051\056\062\041\063\061" +
    "\064\042\001\002\000\050\005\uffda\007\uffda\015\150\020" +
    "\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\061\uffda\064\uffb1\001\002\000\040\005\075\020\uff92" +
    "\044\070\045\102\046\077\047\073\050\105\051\071\052" +
    "\074\053\076\054\106\055\100\057\072\060\101\061\104" +
    "\001\002\000\062\007\ufffb\012\ufffb\013\ufffb\015\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\051\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067" +
    "\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\076\ufffb\077\ufffb" +
    "\001\002\000\034\007\047\012\045\015\046\025\057\026" +
    "\040\027\051\030\060\031\064\032\050\051\056\062\041" +
    "\063\061\064\042\001\002\000\040\005\075\016\234\044" +
    "\070\045\102\046\077\047\073\050\105\051\071\052\074" +
    "\053\076\054\106\055\100\057\072\060\101\061\104\001" +
    "\002\000\004\070\235\001\002\000\052\007\ufffd\012\ufffd" +
    "\015\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\051\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd" +
    "\071\ufffd\072\ufffd\073\ufffd\076\ufffd\077\ufffd\001\002\000" +
    "\052\007\047\012\045\015\046\024\215\025\057\026\040" +
    "\027\051\030\060\031\064\032\050\051\056\062\041\063" +
    "\061\064\042\065\211\071\240\072\223\073\206\076\226" +
    "\077\221\001\002\000\062\007\ufffe\012\ufffe\013\ufffe\015" +
    "\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe" +
    "\032\ufffe\051\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066" +
    "\ufffe\067\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe\076\ufffe" +
    "\077\ufffe\001\002\000\062\007\uff9c\012\uff9c\013\uff9c\015" +
    "\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\051\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066" +
    "\uff9c\067\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\076\uff9c" +
    "\077\uff9c\001\002\000\040\005\uffe3\020\uff91\044\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3" +
    "\054\uffe3\055\uffe3\057\uffe3\060\uffe3\061\uffe3\001\002\000" +
    "\036\005\075\044\070\045\102\046\077\047\073\050\105" +
    "\051\071\052\074\053\076\054\106\055\100\057\072\060" +
    "\101\061\104\001\002\000\034\007\047\012\045\015\046" +
    "\025\057\026\040\027\051\030\060\031\064\032\050\051" +
    "\056\062\041\063\061\064\042\001\002\000\006\011\167" +
    "\020\245\001\002\000\062\007\ufff9\012\ufff9\013\ufff9\015" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\051\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066" +
    "\ufff9\067\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\076\ufff9" +
    "\077\ufff9\001\002\000\040\005\075\020\uff94\044\070\045" +
    "\102\046\077\047\073\050\105\051\071\052\074\053\076" +
    "\054\106\055\100\057\072\060\101\061\104\001\002\000" +
    "\052\007\047\012\045\013\ufff2\015\046\024\215\025\057" +
    "\026\040\027\051\030\060\031\064\032\050\051\056\062" +
    "\041\063\061\064\042\065\211\072\223\073\206\076\226" +
    "\077\221\001\002\000\062\007\ufffa\012\ufffa\013\ufffa\015" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\051\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066" +
    "\ufffa\067\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\076\ufffa" +
    "\077\ufffa\001\002\000\004\020\252\001\002\000\034\002" +
    "\uffff\021\uffff\022\uffff\023\uffff\033\uffff\034\uffff\035\uffff" +
    "\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff\064\uffff\001" +
    "\002\000\034\007\047\012\045\015\046\025\057\026\040" +
    "\027\051\030\060\031\064\032\050\051\056\062\041\063" +
    "\061\064\042\001\002\000\040\005\075\016\255\044\070" +
    "\045\102\046\077\047\073\050\105\051\071\052\074\053" +
    "\076\054\106\055\100\057\072\060\101\061\104\001\002" +
    "\000\004\075\256\001\002\000\056\007\ufffd\012\ufffd\015" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\051\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066" +
    "\ufffd\067\ufffd\072\ufffd\073\ufffd\074\ufffd\076\ufffd\077\ufffd" +
    "\001\002\000\056\007\047\012\045\015\046\024\215\025" +
    "\057\026\040\027\051\030\060\031\064\032\050\051\056" +
    "\062\041\063\061\064\042\065\211\066\uff97\067\uff97\072" +
    "\223\073\206\074\uff97\076\226\077\221\001\002\000\010" +
    "\066\uff95\067\262\074\261\001\002\000\052\007\ufffd\012" +
    "\ufffd\015\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd" +
    "\031\ufffd\032\ufffd\051\ufffd\062\ufffd\063\ufffd\064\ufffd\065" +
    "\ufffd\066\ufffd\072\ufffd\073\ufffd\076\ufffd\077\ufffd\001\002" +
    "\000\004\015\265\001\002\000\004\066\264\001\002\000" +
    "\062\007\uff99\012\uff99\013\uff99\015\uff99\024\uff99\025\uff99" +
    "\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\051\uff99\062" +
    "\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99\071\uff99" +
    "\072\uff99\073\uff99\074\uff99\076\uff99\077\uff99\001\002\000" +
    "\034\007\047\012\045\015\046\025\057\026\040\027\051" +
    "\030\060\031\064\032\050\051\056\062\041\063\061\064" +
    "\042\001\002\000\040\005\075\016\267\044\070\045\102" +
    "\046\077\047\073\050\105\051\071\052\074\053\076\054" +
    "\106\055\100\057\072\060\101\061\104\001\002\000\004" +
    "\075\270\001\002\000\056\007\ufffd\012\ufffd\015\ufffd\024" +
    "\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd" +
    "\051\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067" +
    "\ufffd\072\ufffd\073\ufffd\074\ufffd\076\ufffd\077\ufffd\001\002" +
    "\000\056\007\047\012\045\015\046\024\215\025\057\026" +
    "\040\027\051\030\060\031\064\032\050\051\056\062\041" +
    "\063\061\064\042\065\211\066\uff98\067\uff98\072\223\073" +
    "\206\074\uff98\076\226\077\221\001\002\000\052\007\047" +
    "\012\045\015\046\024\215\025\057\026\040\027\051\030" +
    "\060\031\064\032\050\051\056\062\041\063\061\064\042" +
    "\065\211\066\uff96\072\223\073\206\076\226\077\221\001" +
    "\002\000\062\007\ufffc\012\ufffc\013\ufffc\015\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\051" +
    "\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc" +
    "\071\ufffc\072\ufffc\073\ufffc\074\ufffc\076\ufffc\077\ufffc\001" +
    "\002\000\070\007\047\012\045\015\046\024\215\025\057" +
    "\026\040\027\051\030\060\031\064\032\050\033\030\034" +
    "\016\035\012\036\021\037\026\040\006\041\025\042\020" +
    "\051\056\062\041\063\061\064\227\065\211\072\223\073" +
    "\206\076\226\077\221\001\002\000\004\013\ufff1\001\002" +
    "\000\004\064\277\001\002\000\004\047\300\001\002\000" +
    "\012\007\047\012\045\032\050\064\301\001\002\000\004" +
    "\016\307\001\002\000\004\016\303\001\002\000\004\070" +
    "\304\001\002\000\052\007\ufffd\012\ufffd\015\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\051" +
    "\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\071\ufffd\072\ufffd" +
    "\073\ufffd\076\ufffd\077\ufffd\001\002\000\052\007\047\012" +
    "\045\015\046\024\215\025\057\026\040\027\051\030\060" +
    "\031\064\032\050\051\056\062\041\063\061\064\042\065" +
    "\211\071\306\072\223\073\206\076\226\077\221\001\002" +
    "\000\062\007\uff9b\012\uff9b\013\uff9b\015\uff9b\024\uff9b\025" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\051\uff9b" +
    "\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\071" +
    "\uff9b\072\uff9b\073\uff9b\074\uff9b\076\uff9b\077\uff9b\001\002" +
    "\000\004\070\310\001\002\000\052\007\ufffd\012\ufffd\015" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\051\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\071" +
    "\ufffd\072\ufffd\073\ufffd\076\ufffd\077\ufffd\001\002\000\052" +
    "\007\047\012\045\015\046\024\215\025\057\026\040\027" +
    "\051\030\060\031\064\032\050\051\056\062\041\063\061" +
    "\064\042\065\211\071\312\072\223\073\206\076\226\077" +
    "\221\001\002\000\062\007\uff9a\012\uff9a\013\uff9a\015\uff9a" +
    "\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032" +
    "\uff9a\051\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a" +
    "\067\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\076\uff9a\077" +
    "\uff9a\001\002\000\004\002\000\001\002\000\004\002\001" +
    "\001\002\000\004\064\316\001\002\000\004\020\uffe6\001" +
    "\002\000\004\012\320\001\002\000\024\013\uffa1\033\030" +
    "\035\012\036\021\037\026\040\006\041\025\042\020\064" +
    "\325\001\002\000\010\011\331\013\uffa2\016\uffa2\001\002" +
    "\000\004\013\330\001\002\000\004\064\327\001\002\000" +
    "\010\011\uff9f\013\uff9f\016\uff9f\001\002\000\004\064\326" +
    "\001\002\000\010\011\uff9d\013\uff9d\016\uff9d\001\002\000" +
    "\010\011\uff9e\013\uff9e\016\uff9e\001\002\000\004\020\uffe7" +
    "\001\002\000\022\033\030\035\012\036\021\037\026\040" +
    "\006\041\025\042\020\064\325\001\002\000\010\011\uffa0" +
    "\013\uffa0\016\uffa0\001\002\000\004\064\uffb5\001\002\000" +
    "\004\064\uffb4\001\002\000\004\064\uffb6\001\002\000\004" +
    "\064\337\001\002\000\004\015\340\001\002\000\024\016" +
    "\uffa1\033\030\035\012\036\021\037\026\040\006\041\025" +
    "\042\020\064\325\001\002\000\004\016\342\001\002\000" +
    "\004\012\343\001\002\000\070\007\047\012\045\015\046" +
    "\024\215\025\057\026\040\027\051\030\060\031\064\032" +
    "\050\033\030\034\016\035\012\036\021\037\026\040\006" +
    "\041\025\042\020\051\056\062\041\063\061\064\227\065" +
    "\211\072\223\073\206\076\226\077\221\001\002\000\004" +
    "\013\345\001\002\000\004\020\uffec\001\002\000\036\002" +
    "\ufff4\017\ufff4\021\005\022\007\023\010\033\030\034\016" +
    "\035\012\036\021\037\026\040\006\041\025\042\020\064" +
    "\014\001\002\000\006\002\ufff5\017\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\030\002\014\003\022\004\003\011\021\012" +
    "\016\013\023\014\030\017\010\020\031\021\026\022\012" +
    "\001\001\000\002\001\001\000\012\017\333\021\026\022" +
    "\012\023\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\314\021\026\022\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\010" +
    "\035\015\052\016\061\024\051\025\064\026\043\027\062" +
    "\032\053\043\042\050\034\051\036\052\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\015\052\016\061\024\152\025\064\026" +
    "\043\027\062\032\053\043\042\050\034\051\036\052\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\015\052\016\061\024\135\025\064\026\043" +
    "\027\062\032\053\033\136\034\137\043\042\050\034\051" +
    "\036\052\054\001\001\000\030\015\052\016\061\024\133" +
    "\025\064\026\043\027\062\032\053\043\042\050\034\051" +
    "\036\052\054\001\001\000\034\015\052\016\061\024\126" +
    "\025\064\026\043\027\062\030\127\031\125\032\053\043" +
    "\042\050\034\051\036\052\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\015\052\016\061" +
    "\024\124\025\064\026\043\027\062\032\053\043\042\050" +
    "\034\051\036\052\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\015\052" +
    "\016\061\024\066\025\064\026\043\027\062\032\053\043" +
    "\042\050\034\051\036\052\054\001\001\000\002\001\001" +
    "\000\030\015\052\016\061\024\123\025\064\026\043\027" +
    "\062\032\053\043\042\050\034\051\036\052\054\001\001" +
    "\000\030\015\052\016\061\024\122\025\064\026\043\027" +
    "\062\032\053\043\042\050\034\051\036\052\054\001\001" +
    "\000\030\015\052\016\061\024\121\025\064\026\043\027" +
    "\062\032\053\043\042\050\034\051\036\052\054\001\001" +
    "\000\030\015\052\016\061\024\120\025\064\026\043\027" +
    "\062\032\053\043\042\050\034\051\036\052\054\001\001" +
    "\000\030\015\052\016\061\024\117\025\064\026\043\027" +
    "\062\032\053\043\042\050\034\051\036\052\054\001\001" +
    "\000\030\015\052\016\061\024\116\025\064\026\043\027" +
    "\062\032\053\043\042\050\034\051\036\052\054\001\001" +
    "\000\030\015\052\016\061\024\115\025\064\026\043\027" +
    "\062\032\053\043\042\050\034\051\036\052\054\001\001" +
    "\000\030\015\052\016\061\024\114\025\064\026\043\027" +
    "\062\032\053\043\042\050\034\051\036\052\054\001\001" +
    "\000\030\015\052\016\061\024\113\025\064\026\043\027" +
    "\062\032\053\043\042\050\034\051\036\052\054\001\001" +
    "\000\002\001\001\000\030\015\052\016\061\024\111\025" +
    "\064\026\043\027\062\032\053\043\042\050\034\051\036" +
    "\052\054\001\001\000\002\001\001\000\030\015\052\016" +
    "\061\024\110\025\064\026\043\027\062\032\053\043\042" +
    "\050\034\051\036\052\054\001\001\000\030\015\052\016" +
    "\061\024\107\025\064\026\043\027\062\032\053\043\042" +
    "\050\034\051\036\052\054\001\001\000\030\015\052\016" +
    "\061\024\106\025\064\026\043\027\062\032\053\043\042" +
    "\050\034\051\036\052\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\015\052\016\061\024" +
    "\132\025\064\026\043\027\062\032\053\043\042\050\034" +
    "\051\036\052\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\015\052\016\061\024\141\025" +
    "\064\026\043\027\062\032\053\043\042\050\034\051\036" +
    "\052\054\001\001\000\002\001\001\000\030\015\052\016" +
    "\061\024\143\025\064\026\043\027\062\032\053\043\042" +
    "\050\034\051\036\052\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\015\052\016\061\024\146\025\064" +
    "\026\043\027\062\032\053\043\042\050\034\051\036\052" +
    "\054\001\001\000\002\001\001\000\034\015\052\016\061" +
    "\024\126\025\064\026\043\027\062\030\150\031\125\032" +
    "\053\043\042\050\034\051\036\052\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\015" +
    "\052\016\061\024\155\025\064\026\043\027\062\032\053" +
    "\043\042\050\034\051\036\052\054\001\001\000\030\015" +
    "\052\016\061\024\164\025\064\026\043\027\062\032\053" +
    "\043\042\050\034\051\036\052\054\001\001\000\002\001" +
    "\001\000\030\015\052\016\061\024\161\025\064\026\043" +
    "\027\062\032\053\043\042\050\034\051\036\052\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\015\052\016\061\024\167\025\064" +
    "\026\043\027\062\032\053\043\042\050\034\051\036\052" +
    "\054\001\001\000\002\001\001\000\012\017\010\020\171" +
    "\021\026\022\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\010" +
    "\020\176\021\026\022\012\001\001\000\002\001\001\000" +
    "\012\017\010\020\200\021\026\022\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\312\004\003\011" +
    "\021\012\016\013\023\014\030\017\010\020\031\021\026" +
    "\022\012\001\001\000\002\001\001\000\062\007\213\011" +
    "\206\015\052\016\061\017\010\020\031\021\026\022\012" +
    "\024\212\025\064\026\043\027\062\032\053\040\216\041" +
    "\221\042\207\043\042\044\224\045\217\050\215\051\036" +
    "\052\054\053\211\054\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\246\001\001\000" +
    "\030\015\052\016\061\024\245\025\064\026\043\027\062" +
    "\032\053\043\042\050\034\051\036\052\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\015\052\016\061\024\241\025\064\026\043\027\062\032" +
    "\053\043\042\050\240\051\036\052\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\015\052\016\061\024\227\025\064\026\043" +
    "\027\062\032\053\043\042\050\034\051\036\052\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\015\052\016\061\024\232\025\064\026\043\027" +
    "\062\032\053\043\042\050\034\051\036\052\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\235\001" +
    "\001\000\044\007\236\015\052\016\061\024\212\025\064" +
    "\026\043\027\062\032\053\040\216\041\221\042\207\043" +
    "\042\044\224\045\217\050\215\051\036\052\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\010\243\015\052\016\061\024\051" +
    "\025\064\026\043\027\062\032\053\043\042\050\034\051" +
    "\036\052\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\007\236\015\052\016\061\024" +
    "\212\025\064\026\043\027\062\032\053\040\216\041\221" +
    "\042\207\043\042\044\224\045\217\050\215\051\036\052" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\015\052\016\061\024\253\025\064\026" +
    "\043\027\062\032\053\043\042\050\034\051\036\052\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\256\001\001\000\046\007\236\015\052\016\061\024\212" +
    "\025\064\026\043\027\062\032\053\040\216\041\221\042" +
    "\207\043\042\044\224\045\217\046\257\050\215\051\036" +
    "\052\054\001\001\000\004\047\262\001\001\000\004\006" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\015\052\016\061\024\265\025\064\026" +
    "\043\027\062\032\053\043\042\050\034\051\036\052\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\270\001\001\000\044\007\236\015\052\016\061\024\212" +
    "\025\064\026\043\027\062\032\053\040\216\041\221\042" +
    "\207\043\042\044\224\045\217\050\215\051\036\052\054" +
    "\001\001\000\044\007\236\015\052\016\061\024\212\025" +
    "\064\026\043\027\062\032\053\040\216\041\221\042\207" +
    "\043\042\044\224\045\217\050\215\051\036\052\054\001" +
    "\001\000\002\001\001\000\062\007\213\011\206\015\052" +
    "\016\061\017\010\020\031\021\026\022\012\024\212\025" +
    "\064\026\043\027\062\032\053\040\216\041\221\042\207" +
    "\043\042\044\224\045\217\050\215\051\036\052\054\053" +
    "\274\054\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\301\027\062\032\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\304\001\001\000\044\007\236\015\052\016" +
    "\061\024\212\025\064\026\043\027\062\032\053\040\216" +
    "\041\221\042\207\043\042\044\224\045\217\050\215\051" +
    "\036\052\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\310\001\001\000\044\007\236\015\052\016" +
    "\061\024\212\025\064\026\043\027\062\032\053\040\216" +
    "\041\221\042\207\043\042\044\224\045\217\050\215\051" +
    "\036\052\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\322\021\026\022\012\035\321" +
    "\036\320\037\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\322\021\026\022\012\037\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\322" +
    "\021\026\022\012\035\340\036\320\037\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\007\213\011\206" +
    "\015\052\016\061\017\010\020\031\021\026\022\012\024" +
    "\212\025\064\026\043\027\062\032\053\040\216\041\221" +
    "\042\207\043\042\044\224\045\217\050\215\051\036\052" +
    "\054\053\343\054\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\346\004\003\011\021\012\016\013" +
    "\023\014\030\017\010\020\031\021\026\022\012\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Boolean syntaxErrors = false;

  public void syntax_error(Symbol current_token) {
    report_error("Syntax error at line " + (current_token.left+1) + ", column "
        + current_token.right + "\n", null
    );
    syntaxErrors = true;
  }

  public void unrecovered_syntax_error(Symbol current_token) {
    if(!syntaxErrors) {
      report_error("Syntax error at line " + (current_token.left+1) + ", column "
          + current_token.right, null
      );
      syntaxErrors = true;
    }
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declarations main declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= MAIN LBRACE body RBRACE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= io_op SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= return SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= settable ASSIGNMENT multiple_assignments SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarations ::= declaration SEMICOLON declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // body ::= variable_declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // body ::= statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variable_declarations ::= variable_declaration SEMICOLON body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarations",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= function_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= alias_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration ::= type_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_declaration ::= FDEF ftype IDENTIFIER LPAREN type_id_contents RPAREN LBRACE body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variable_declaration ::= type_with_top_id IDENTIFIER ASSIGNMENT multiple_assignments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variable_declaration ::= type_with_top_id IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // multiple_assignments ::= multiple_assignments COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignments",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // multiple_assignments ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignments",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_declaration ::= TDEF IDENTIFIER LBRACE type_id_contents RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // alias_declaration ::= ALIAS type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias_declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= evaluable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= slice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= settable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // slice ::= index_access LBRACKET expression COLON expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // slice ::= index_access LBRACKET COLON expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // slice ::= index_access LBRACKET expression COLON RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // slice ::= index_access LBRACKET COLON RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // settable ::= dot_access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("settable",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // settable ::= index_access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("settable",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dot_access ::= expression DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dot_access",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // index_access ::= index_access LBRACKET expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_access",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // index_access ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_access",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // item ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // item ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // item ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // item ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // item ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // collection ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // collection ::= dict_start 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // collection ::= sequence_start 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // evaluable ::= NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // evaluable ::= LEN LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // evaluable ::= MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // evaluable ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // evaluable ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // evaluable ::= expression AND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // evaluable ::= expression DIV expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // evaluable ::= expression EQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // evaluable ::= expression IN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // evaluable ::= expression LANGLE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // evaluable ::= expression LTEQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // evaluable ::= expression MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // evaluable ::= expression MULT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // evaluable ::= expression NEQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // evaluable ::= expression OR expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // evaluable ::= expression PLUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // evaluable ::= expression POW expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // evaluable ::= expression APPEND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // evaluable ::= item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // evaluable ::= collection 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= BOOLEAN_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type ::= CHAR_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type ::= dict_t 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type ::= FLOAT_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type ::= INT_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type ::= RATIONAL_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type ::= sequence_t 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ftype ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftype",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ftype ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftype",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ftype ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftype",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // type_with_top_id ::= TOP_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_top_id",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // type_with_top_id ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_top_id",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // type_with_top_id ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_top_id",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // function_call ::= IDENTIFIER LPAREN sequence_contents RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sequence_t ::= SEQ_T LANGLE type_with_top_id RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_t",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sequence_t ::= SEQ_T LANGLE IDENTIFIER RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_t",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sequence_start ::= LBRACKET sequence_contents RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_start",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sequence_contents ::= sequence_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_contents",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sequence_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_contents",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sequence_body ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_body",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sequence_body ::= sequence_body COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_body",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // dict_t ::= DICT_T LANGLE type_with_top_id COMMA type_with_top_id RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_t",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // dict_start ::= LBRACE dict_contents RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_start",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // dict_contents ::= dict_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_contents",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dict_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_contents",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // dict_body ::= expression COLON expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dict_body ::= dict_body COMMA expression COLON expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // type_id_contents ::= type_id_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_contents",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // type_id_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_contents",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // type_id_body ::= type_id_body COMMA type_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // type_id_body ::= type_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // type_id ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // type_id ::= IDENTIFIER IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // while ::= WHILE LPAREN expression RPAREN DO statements OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for ::= FORALL LPAREN IDENTIFIER IN collection RPAREN DO statements OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for ::= FORALL LPAREN IDENTIFIER IN IDENTIFIER RPAREN DO statements OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // if ::= IF LPAREN expression RPAREN THEN statements elif else FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // elif ::= elif ELIF LPAREN expression RPAREN THEN statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // elif ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // else ::= ELSE statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // else ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // return ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // return ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // io_op ::= PRINT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io_op",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // io_op ::= READ settable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io_op",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
