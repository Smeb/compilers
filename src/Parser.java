
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\005\000\002\005" +
    "\012\000\002\006\005\000\002\006\002\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\004\000\002" +
    "\003\005\000\002\003\002\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\014\016" +
    "\000\002\012\005\000\002\012\002\000\002\013\005\000" +
    "\002\060\003\000\002\060\002\000\002\010\005\000\002" +
    "\011\005\000\002\011\002\000\002\015\007\000\002\016" +
    "\005\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\057\010\000" +
    "\002\057\007\000\002\057\007\000\002\057\006\000\002" +
    "\055\003\000\002\055\003\000\002\047\005\000\002\056" +
    "\006\000\002\056\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\027\004\000\002\027\006\000\002\027\004\000\002\027" +
    "\005\000\002\027\003\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\025\003\000\002\025\003\000\002\022\003\000\002\022" +
    "\003\000\002\030\006\000\002\024\006\000\002\031\005" +
    "\000\002\032\003\000\002\032\002\000\002\033\003\000" +
    "\002\033\005\000\002\023\010\000\002\034\005\000\002" +
    "\035\003\000\002\035\002\000\002\036\003\000\002\036" +
    "\005\000\002\037\005\000\002\040\003\000\002\040\002" +
    "\000\002\041\005\000\002\041\003\000\002\042\004\000" +
    "\002\043\011\000\002\044\013\000\002\044\013\000\002" +
    "\052\013\000\002\053\005\000\002\053\002\000\002\054" +
    "\004\000\002\054\002\000\002\051\004\000\002\051\003" +
    "\000\002\045\003\000\002\045\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\032\017\ufff4\021\ufff4\022\ufff4\023\ufff4\033" +
    "\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\064\ufff4\001\002\000\004\002\332\001\002\000\032\017" +
    "\024\021\007\022\010\023\012\033\031\035\014\036\023" +
    "\037\027\040\011\041\026\042\021\064\016\001\002\000" +
    "\004\020\331\001\002\000\024\033\031\035\014\036\023" +
    "\037\027\040\011\041\026\042\021\043\314\064\016\001" +
    "\002\000\004\064\302\001\002\000\030\006\uffb8\011\uffb8" +
    "\020\uffb8\033\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\064\uffb8\001\002\000\022\033\031\035\014" +
    "\036\023\037\027\040\011\041\026\042\021\064\016\001" +
    "\002\000\004\064\275\001\002\000\030\006\uffbb\011\uffbb" +
    "\020\uffbb\033\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\042\uffbb\064\uffbb\001\002\000\030\006\uffb5\011\uffb5" +
    "\020\uffb5\033\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\064\uffb5\001\002\000\030\006\uffbc\011\uffbc" +
    "\020\uffbc\033\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\064\uffbc\001\002\000\032\002\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\033\ufff4\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\064\ufff4\001\002\000\004\020\ufff3" +
    "\001\002\000\030\006\uffb6\011\uffb6\020\uffb6\033\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\064\uffb6" +
    "\001\002\000\004\020\ufff2\001\002\000\030\006\uffba\011" +
    "\uffba\020\uffba\033\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\042\uffba\064\uffba\001\002\000\004\012\045\001" +
    "\002\000\004\020\ufff0\001\002\000\030\006\uffb7\011\uffb7" +
    "\020\uffb7\033\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\064\uffb7\001\002\000\004\005\040\001\002" +
    "\000\030\006\uffb9\011\uffb9\020\uffb9\033\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\064\uffb9\001\002" +
    "\000\004\005\033\001\002\000\004\020\ufff1\001\002\000" +
    "\024\033\031\034\035\035\014\036\023\037\027\040\011" +
    "\041\026\042\021\064\016\001\002\000\006\006\uffb1\011" +
    "\uffb1\001\002\000\006\006\uffb2\011\uffb2\001\002\000\004" +
    "\006\037\001\002\000\030\006\uffaf\011\uffaf\020\uffaf\033" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\064\uffaf\001\002\000\024\033\031\034\035\035\014\036" +
    "\023\037\027\040\011\041\026\042\021\064\016\001\002" +
    "\000\004\011\042\001\002\000\024\033\031\034\035\035" +
    "\014\036\023\037\027\040\011\041\026\042\021\064\016" +
    "\001\002\000\004\006\044\001\002\000\030\006\uffa9\011" +
    "\uffa9\020\uffa9\033\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\064\uffa9\001\002\000\066\007\uffed\012" +
    "\uffed\015\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\042\uffed\051\uffed\062\uffed\063\uffed\064\uffed" +
    "\065\uffed\072\uffed\073\uffed\076\uffed\077\uffed\001\002\000" +
    "\066\007\053\012\102\015\056\024\073\025\065\026\054" +
    "\027\106\030\055\031\063\032\051\033\031\035\014\036" +
    "\023\037\027\040\011\041\026\042\021\051\060\062\061" +
    "\063\110\064\113\065\070\072\105\073\050\076\112\077" +
    "\103\001\002\000\052\005\uffcf\010\uffcf\011\uffcf\013\uffcf" +
    "\014\uffcf\016\uffcf\020\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\001\002\000\004\015\257\001" +
    "\002\000\052\005\uffd1\010\uffd1\011\uffd1\013\uffd1\014\uffd1" +
    "\016\uffd1\020\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\001\002\000\052\005\uffd0\010\uffd0\011" +
    "\uffd0\013\uffd0\014\uffd0\016\uffd0\020\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\055\uffd0\057\uffd0\060\uffd0\061\uffd0\001\002\000\036" +
    "\007\053\010\uffac\012\102\015\056\025\065\026\054\027" +
    "\106\030\055\031\063\032\051\051\060\062\061\063\110" +
    "\064\116\001\002\000\052\005\uffd6\010\uffd6\011\uffd6\013" +
    "\uffd6\014\uffd6\016\uffd6\020\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\001\002\000\052\005\uffd4" +
    "\010\uffd4\011\uffd4\013\uffd4\014\uffd4\016\uffd4\020\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\055\uffd4\057\uffd4\060\uffd4\061\uffd4\001" +
    "\002\000\034\007\053\012\102\015\056\025\065\026\054" +
    "\027\106\030\055\031\063\032\051\051\060\062\061\063" +
    "\110\064\116\001\002\000\056\005\uffda\007\240\010\uffda" +
    "\011\uffda\013\uffda\014\uffda\016\uffda\020\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda" +
    "\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\001" +
    "\002\000\034\007\053\012\102\015\056\025\065\026\054" +
    "\027\106\030\055\031\063\032\051\051\060\062\061\063" +
    "\110\064\116\001\002\000\034\007\053\012\102\015\056" +
    "\025\065\026\054\027\106\030\055\031\063\032\051\051" +
    "\060\062\061\063\110\064\116\001\002\000\004\020\235" +
    "\001\002\000\052\005\uffd3\010\uffd3\011\uffd3\013\uffd3\014" +
    "\uffd3\016\uffd3\020\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\057" +
    "\uffd3\060\uffd3\061\uffd3\001\002\000\052\005\uffe1\010\uffe1" +
    "\011\uffe1\013\uffe1\014\uffe1\016\uffe1\020\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\057\uffe1\060\uffe1\061\uffe1\001\002\000" +
    "\052\005\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\016\uffd2" +
    "\020\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\057\uffd2\060\uffd2" +
    "\061\uffd2\001\002\000\052\005\uffe2\010\uffe2\011\uffe2\013" +
    "\uffe2\014\uffe2\016\uffe2\020\uffe2\044\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\001\002\000\004\020\ufffc" +
    "\001\002\000\004\015\221\001\002\000\040\005\130\020" +
    "\ufff7\044\123\045\135\046\133\047\126\050\137\051\124" +
    "\052\127\053\131\054\140\055\132\057\125\060\134\061" +
    "\136\001\002\000\004\020\215\001\002\000\036\007\053" +
    "\012\102\015\056\020\uff94\025\065\026\054\027\106\030" +
    "\055\031\063\032\051\051\060\062\061\063\110\064\116" +
    "\001\002\000\042\005\uffe0\020\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\056\206\057\uffe0\060\uffe0\061\uffe0\001\002\000" +
    "\054\005\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb\016\uffdb" +
    "\020\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\001\002\000\052\005\uffe4\010\uffe4\011" +
    "\uffe4\013\uffe4\014\uffe4\016\uffe4\020\uffe4\044\uffe4\045\uffe4" +
    "\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\057\uffe4\060\uffe4\061\uffe4\001\002\000\004" +
    "\020\ufffa\001\002\000\004\020\ufffb\001\002\000\052\005" +
    "\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3\016\uffe3\020\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\057\uffe3\060\uffe3\061\uffe3" +
    "\001\002\000\036\007\053\012\102\013\uffa6\015\056\025" +
    "\065\026\054\027\106\030\055\031\063\032\051\051\060" +
    "\062\061\063\110\064\116\001\002\000\002\001\002\000" +
    "\004\020\ufff9\001\002\000\004\015\164\001\002\000\052" +
    "\005\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5\016\uffd5\020" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\001\002\000\052\005\uffca\010\uffca\011\uffca\013\uffca" +
    "\014\uffca\016\uffca\020\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca" +
    "\057\uffca\060\uffca\061\uffca\001\002\000\004\015\161\001" +
    "\002\000\004\020\ufff8\001\002\000\004\020\uff93\001\002" +
    "\000\050\005\uffd7\007\uffd7\015\114\020\uffd7\044\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\064" +
    "\uffbc\001\002\000\036\007\053\012\102\015\056\016\uffac" +
    "\025\065\026\054\027\106\030\055\031\063\032\051\051" +
    "\060\062\061\063\110\064\116\001\002\000\052\005\uffe0" +
    "\010\uffe0\011\uffe0\013\uffe0\014\uffe0\016\uffe0\020\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\057\uffe0\060\uffe0\061\uffe0\001" +
    "\002\000\060\005\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7" +
    "\014\uffd7\015\114\016\uffd7\020\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7" +
    "\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\001\002\000" +
    "\010\010\uffad\011\157\016\uffad\001\002\000\044\005\130" +
    "\010\uffab\011\uffab\016\uffab\044\123\045\135\046\133\047" +
    "\126\050\137\051\124\052\127\053\131\054\140\055\132" +
    "\057\125\060\134\061\136\001\002\000\004\016\122\001" +
    "\002\000\052\005\uffb0\010\uffb0\011\uffb0\013\uffb0\014\uffb0" +
    "\016\uffb0\020\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\057\uffb0" +
    "\060\uffb0\061\uffb0\001\002\000\034\007\053\012\102\015" +
    "\056\025\065\026\054\027\106\030\055\031\063\032\051" +
    "\051\060\062\061\063\110\064\116\001\002\000\034\007" +
    "\053\012\102\015\056\025\065\026\054\027\106\030\055" +
    "\031\063\032\051\051\060\062\061\063\110\064\116\001" +
    "\002\000\034\007\053\012\102\015\056\025\065\026\054" +
    "\027\106\030\055\031\063\032\051\051\060\062\061\063" +
    "\110\064\116\001\002\000\034\007\053\012\102\015\056" +
    "\025\065\026\054\027\106\030\055\031\063\032\051\051" +
    "\060\062\061\063\110\064\116\001\002\000\034\007\053" +
    "\012\102\015\056\025\065\026\054\027\106\030\055\031" +
    "\063\032\051\051\060\062\061\063\110\064\116\001\002" +
    "\000\034\007\053\012\102\015\056\025\065\026\054\027" +
    "\106\030\055\031\063\032\051\051\060\062\061\063\110" +
    "\064\116\001\002\000\034\007\053\012\102\015\056\025" +
    "\065\026\054\027\106\030\055\031\063\032\051\051\060" +
    "\062\061\063\110\064\116\001\002\000\034\007\053\012" +
    "\102\015\056\025\065\026\054\027\106\030\055\031\063" +
    "\032\051\051\060\062\061\063\110\064\116\001\002\000" +
    "\034\007\053\012\102\015\056\025\065\026\054\027\106" +
    "\030\055\031\063\032\051\051\060\062\061\063\110\064" +
    "\116\001\002\000\004\064\145\001\002\000\034\007\053" +
    "\012\102\015\056\025\065\026\054\027\106\030\055\031" +
    "\063\032\051\051\060\062\061\063\110\064\116\001\002" +
    "\000\034\007\053\012\102\015\056\025\065\026\054\027" +
    "\106\030\055\031\063\032\051\051\060\062\061\063\110" +
    "\064\116\001\002\000\034\007\053\012\102\015\056\025" +
    "\065\026\054\027\106\030\055\031\063\032\051\051\060" +
    "\062\061\063\110\064\116\001\002\000\034\007\053\012" +
    "\102\015\056\025\065\026\054\027\106\030\055\031\063" +
    "\032\051\051\060\062\061\063\110\064\116\001\002\000" +
    "\052\005\130\010\uffc0\011\uffc0\013\uffc0\014\uffc0\016\uffc0" +
    "\020\uffc0\044\uffc0\045\uffc0\046\133\047\126\050\137\051" +
    "\uffc0\052\uffc0\053\131\054\uffc0\055\uffc0\057\125\060\uffc0" +
    "\061\uffc0\001\002\000\042\010\uffc4\011\uffc4\013\uffc4\014" +
    "\uffc4\016\uffc4\020\uffc4\044\uffc4\045\uffc4\047\uffc4\051\uffc4" +
    "\052\uffc4\054\uffc4\055\uffc4\057\uffc4\060\uffc4\061\uffc4\001" +
    "\002\000\052\005\130\010\uffbd\011\uffbd\013\uffbd\014\uffbd" +
    "\016\uffbd\020\uffbd\044\uffbd\045\uffbd\046\133\047\126\050" +
    "\137\051\uffbd\052\uffbd\053\131\054\uffbd\055\uffbd\057\125" +
    "\060\uffbd\061\uffbd\001\002\000\052\005\130\010\uffc8\011" +
    "\uffc8\013\uffc8\014\uffc8\016\uffc8\020\uffc8\044\uffc8\045\uffc8" +
    "\046\133\047\126\050\137\051\uffc8\052\uffc8\053\131\054" +
    "\uffc8\055\uffc8\057\125\060\uffc8\061\uffc8\001\002\000\054" +
    "\005\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\016\uffd9\020" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060" +
    "\uffd9\061\uffd9\001\002\000\042\010\uffc7\011\uffc7\013\uffc7" +
    "\014\uffc7\016\uffc7\020\uffc7\044\uffc7\045\uffc7\047\uffc7\051" +
    "\uffc7\052\uffc7\054\uffc7\055\uffc7\057\uffc7\060\uffc7\061\uffc7" +
    "\001\002\000\052\005\130\010\uffbf\011\uffbf\013\uffbf\014" +
    "\uffbf\016\uffbf\020\uffbf\044\uffbf\045\uffbf\046\133\047\126" +
    "\050\137\051\uffbf\052\uffbf\053\131\054\uffbf\055\uffbf\057" +
    "\125\060\uffbf\061\uffbf\001\002\000\042\010\uffc1\011\uffc1" +
    "\013\uffc1\014\uffc1\016\uffc1\020\uffc1\044\uffc1\045\uffc1\047" +
    "\uffc1\051\uffc1\052\uffc1\054\uffc1\055\uffc1\057\uffc1\060\uffc1" +
    "\061\uffc1\001\002\000\042\010\uffc5\011\uffc5\013\uffc5\014" +
    "\uffc5\016\uffc5\020\uffc5\044\uffc5\045\uffc5\047\uffc5\051\uffc5" +
    "\052\uffc5\054\uffc5\055\uffc5\057\uffc5\060\uffc5\061\uffc5\001" +
    "\002\000\052\005\130\010\uffc2\011\uffc2\013\uffc2\014\uffc2" +
    "\016\uffc2\020\uffc2\044\uffc2\045\uffc2\046\133\047\126\050" +
    "\137\051\uffc2\052\uffc2\053\131\054\uffc2\055\uffc2\057\125" +
    "\060\uffc2\061\uffc2\001\002\000\052\005\130\010\uffc6\011" +
    "\uffc6\013\uffc6\014\uffc6\016\uffc6\020\uffc6\044\uffc6\045\uffc6" +
    "\046\133\047\126\050\137\051\uffc6\052\uffc6\053\131\054" +
    "\uffc6\055\uffc6\057\125\060\uffc6\061\uffc6\001\002\000\052" +
    "\005\130\010\uffbe\011\uffbe\013\uffbe\014\uffbe\016\uffbe\020" +
    "\uffbe\044\uffbe\045\uffbe\046\133\047\126\050\137\051\uffbe" +
    "\052\uffbe\053\131\054\uffbe\055\uffbe\057\125\060\uffbe\061" +
    "\uffbe\001\002\000\052\005\130\010\uffc3\011\uffc3\013\uffc3" +
    "\014\uffc3\016\uffc3\020\uffc3\044\uffc3\045\uffc3\046\133\047" +
    "\126\050\137\051\uffc3\052\uffc3\053\131\054\uffc3\055\uffc3" +
    "\057\125\060\uffc3\061\uffc3\001\002\000\052\005\130\010" +
    "\uffc9\011\uffc9\013\uffc9\014\uffc9\016\uffc9\020\uffc9\044\uffc9" +
    "\045\uffc9\046\133\047\126\050\137\051\uffc9\052\uffc9\053" +
    "\131\054\uffc9\055\uffc9\057\125\060\uffc9\061\uffc9\001\002" +
    "\000\034\007\053\012\102\015\056\025\065\026\054\027" +
    "\106\030\055\031\063\032\051\051\060\062\061\063\110" +
    "\064\116\001\002\000\044\005\130\010\uffaa\011\uffaa\016" +
    "\uffaa\044\123\045\135\046\133\047\126\050\137\051\124" +
    "\052\127\053\131\054\140\055\132\057\125\060\134\061" +
    "\136\001\002\000\034\007\053\012\102\015\056\025\065" +
    "\026\054\027\106\030\055\031\063\032\051\051\060\062" +
    "\061\063\110\064\116\001\002\000\040\005\130\016\163" +
    "\044\123\045\135\046\133\047\126\050\137\051\124\052" +
    "\127\053\131\054\140\055\132\057\125\060\134\061\136" +
    "\001\002\000\052\005\uffcd\010\uffcd\011\uffcd\013\uffcd\014" +
    "\uffcd\016\uffcd\020\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\001\002\000\034\007\053\012\102" +
    "\015\056\025\065\026\054\027\106\030\055\031\063\032" +
    "\051\051\060\062\061\063\110\064\116\001\002\000\040" +
    "\005\130\016\166\044\123\045\135\046\133\047\126\050" +
    "\137\051\124\052\127\053\131\054\140\055\132\057\125" +
    "\060\134\061\136\001\002\000\004\070\167\001\002\000" +
    "\052\007\ufffd\012\ufffd\015\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\032\ufffd\051\ufffd\062\ufffd\063" +
    "\ufffd\064\ufffd\065\ufffd\071\ufffd\072\ufffd\073\ufffd\076\ufffd" +
    "\077\ufffd\001\002\000\052\007\053\012\102\015\056\024" +
    "\073\025\065\026\054\027\106\030\055\031\063\032\051" +
    "\051\060\062\061\063\110\064\116\065\070\071\172\072" +
    "\105\073\050\076\112\077\103\001\002\000\004\020\173" +
    "\001\002\000\004\020\uff9d\001\002\000\062\007\ufffe\012" +
    "\ufffe\013\ufffe\015\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\032\ufffe\051\ufffe\062\ufffe\063\ufffe\064" +
    "\ufffe\065\ufffe\066\ufffe\067\ufffe\071\ufffe\072\ufffe\073\ufffe" +
    "\074\ufffe\076\ufffe\077\ufffe\001\002\000\004\020\uff92\001" +
    "\002\000\006\011\uffa5\013\uffa5\001\002\000\040\005\130" +
    "\014\204\044\123\045\135\046\133\047\126\050\137\051" +
    "\124\052\127\053\131\054\140\055\132\057\125\060\134" +
    "\061\136\001\002\000\004\013\203\001\002\000\006\011" +
    "\201\013\uffa7\001\002\000\034\007\053\012\102\015\056" +
    "\025\065\026\054\027\106\030\055\031\063\032\051\051" +
    "\060\062\061\063\110\064\116\001\002\000\006\011\uffa4" +
    "\013\uffa4\001\002\000\052\005\uffa8\010\uffa8\011\uffa8\013" +
    "\uffa8\014\uffa8\016\uffa8\020\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\057\uffa8\060\uffa8\061\uffa8\001\002\000\034\007\053" +
    "\012\102\015\056\025\065\026\054\027\106\030\055\031" +
    "\063\032\051\051\060\062\061\063\110\064\116\001\002" +
    "\000\042\005\130\011\uffa3\013\uffa3\044\123\045\135\046" +
    "\133\047\126\050\137\051\124\052\127\053\131\054\140" +
    "\055\132\057\125\060\134\061\136\001\002\000\034\007" +
    "\053\012\102\015\056\025\065\026\054\027\106\030\055" +
    "\031\063\032\051\051\060\062\061\063\110\064\116\001" +
    "\002\000\004\020\ufff6\001\002\000\042\005\130\011\uffe7" +
    "\020\uffe7\044\123\045\135\046\133\047\126\050\137\051" +
    "\124\052\127\053\131\054\140\055\132\057\125\060\134" +
    "\061\136\001\002\000\006\011\212\020\uffe9\001\002\000" +
    "\034\007\053\012\102\015\056\025\065\026\054\027\106" +
    "\030\055\031\063\032\051\051\060\062\061\063\110\064" +
    "\116\001\002\000\042\005\130\011\uffe8\020\uffe8\044\123" +
    "\045\135\046\133\047\126\050\137\051\124\052\127\053" +
    "\131\054\140\055\132\057\125\060\134\061\136\001\002" +
    "\000\040\005\130\020\uff95\044\123\045\135\046\133\047" +
    "\126\050\137\051\124\052\127\053\131\054\140\055\132" +
    "\057\125\060\134\061\136\001\002\000\052\007\ufffd\012" +
    "\ufffd\013\ufffd\015\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\051\ufffd\062\ufffd\063\ufffd\064" +
    "\ufffd\065\ufffd\072\ufffd\073\ufffd\076\ufffd\077\ufffd\001\002" +
    "\000\052\007\053\012\102\013\217\015\056\024\073\025" +
    "\065\026\054\027\106\030\055\031\063\032\051\051\060" +
    "\062\061\063\110\064\116\065\070\072\105\073\050\076" +
    "\112\077\103\001\002\000\004\020\220\001\002\000\032" +
    "\002\uffff\021\uffff\022\uffff\023\uffff\033\uffff\035\uffff\036" +
    "\uffff\037\uffff\040\uffff\041\uffff\042\uffff\064\uffff\001\002" +
    "\000\034\007\053\012\102\015\056\025\065\026\054\027" +
    "\106\030\055\031\063\032\051\051\060\062\061\063\110" +
    "\064\116\001\002\000\040\005\130\016\223\044\123\045" +
    "\135\046\133\047\126\050\137\051\124\052\127\053\131" +
    "\054\140\055\132\057\125\060\134\061\136\001\002\000" +
    "\004\075\224\001\002\000\056\007\ufffd\012\ufffd\015\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032" +
    "\ufffd\051\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd" +
    "\067\ufffd\072\ufffd\073\ufffd\074\ufffd\076\ufffd\077\ufffd\001" +
    "\002\000\056\007\053\012\102\015\056\024\073\025\065" +
    "\026\054\027\106\030\055\031\063\032\051\051\060\062" +
    "\061\063\110\064\116\065\070\066\uff98\067\uff98\072\105" +
    "\073\050\074\uff98\076\112\077\103\001\002\000\010\066" +
    "\uff96\067\230\074\227\001\002\000\052\007\ufffd\012\ufffd" +
    "\015\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\051\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd" +
    "\066\ufffd\072\ufffd\073\ufffd\076\ufffd\077\ufffd\001\002\000" +
    "\056\007\ufffd\012\ufffd\015\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\032\ufffd\051\ufffd\062\ufffd\063" +
    "\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\072\ufffd\073\ufffd" +
    "\074\ufffd\076\ufffd\077\ufffd\001\002\000\004\066\232\001" +
    "\002\000\004\020\uff9a\001\002\000\056\007\053\012\102" +
    "\015\056\024\073\025\065\026\054\027\106\030\055\031" +
    "\063\032\051\051\060\062\061\063\110\064\116\065\070" +
    "\066\uff99\067\uff99\072\105\073\050\074\uff99\076\112\077" +
    "\103\001\002\000\052\007\053\012\102\015\056\024\073" +
    "\025\065\026\054\027\106\030\055\031\063\032\051\051" +
    "\060\062\061\063\110\064\116\065\070\066\uff97\072\105" +
    "\073\050\076\112\077\103\001\002\000\066\007\uffee\012" +
    "\uffee\015\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee" +
    "\031\uffee\032\uffee\033\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\051\uffee\062\uffee\063\uffee\064\uffee" +
    "\065\uffee\072\uffee\073\uffee\076\uffee\077\uffee\001\002\000" +
    "\042\010\uffce\011\uffce\013\uffce\014\uffce\016\uffce\020\uffce" +
    "\044\uffce\045\uffce\047\uffce\051\uffce\052\uffce\054\uffce\055" +
    "\uffce\057\uffce\060\uffce\061\uffce\001\002\000\052\005\130" +
    "\010\uffcc\011\uffcc\013\uffcc\014\uffcc\016\uffcc\020\uffcc\044" +
    "\uffcc\045\uffcc\046\133\047\126\050\137\051\uffcc\052\uffcc" +
    "\053\131\054\uffcc\055\uffcc\057\125\060\uffcc\061\uffcc\001" +
    "\002\000\036\007\053\012\102\014\241\015\056\025\065" +
    "\026\054\027\106\030\055\031\063\032\051\051\060\062" +
    "\061\063\110\064\116\001\002\000\036\007\053\010\250" +
    "\012\102\015\056\025\065\026\054\027\106\030\055\031" +
    "\063\032\051\051\060\062\061\063\110\064\116\001\002" +
    "\000\042\005\130\010\244\014\243\044\123\045\135\046" +
    "\133\047\126\050\137\051\124\052\127\053\131\054\140" +
    "\055\132\057\125\060\134\061\136\001\002\000\036\007" +
    "\053\010\245\012\102\015\056\025\065\026\054\027\106" +
    "\030\055\031\063\032\051\051\060\062\061\063\110\064" +
    "\116\001\002\000\056\005\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\013\uffd8\014\uffd8\016\uffd8\020\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\001\002\000" +
    "\052\005\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd\016\uffdd" +
    "\020\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051" +
    "\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\057\uffdd\060\uffdd" +
    "\061\uffdd\001\002\000\040\005\130\010\247\044\123\045" +
    "\135\046\133\047\126\050\137\051\124\052\127\053\131" +
    "\054\140\055\132\057\125\060\134\061\136\001\002\000" +
    "\052\005\uffdf\010\uffdf\011\uffdf\013\uffdf\014\uffdf\016\uffdf" +
    "\020\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\057\uffdf\060\uffdf" +
    "\061\uffdf\001\002\000\052\005\uffdc\010\uffdc\011\uffdc\013" +
    "\uffdc\014\uffdc\016\uffdc\020\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\057\uffdc\060\uffdc\061\uffdc\001\002\000\040\005\130" +
    "\010\252\044\123\045\135\046\133\047\126\050\137\051" +
    "\124\052\127\053\131\054\140\055\132\057\125\060\134" +
    "\061\136\001\002\000\052\005\uffde\010\uffde\011\uffde\013" +
    "\uffde\014\uffde\016\uffde\020\uffde\044\uffde\045\uffde\046\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055" +
    "\uffde\057\uffde\060\uffde\061\uffde\001\002\000\040\005\130" +
    "\016\254\044\123\045\135\046\133\047\126\050\137\051" +
    "\124\052\127\053\131\054\140\055\132\057\125\060\134" +
    "\061\136\001\002\000\052\005\uffcb\010\uffcb\011\uffcb\013" +
    "\uffcb\014\uffcb\016\uffcb\020\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\001\002\000\004\010\256" +
    "\001\002\000\052\005\uffae\010\uffae\011\uffae\013\uffae\014" +
    "\uffae\016\uffae\020\uffae\044\uffae\045\uffae\046\uffae\047\uffae" +
    "\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\057" +
    "\uffae\060\uffae\061\uffae\001\002\000\004\064\260\001\002" +
    "\000\004\047\261\001\002\000\012\007\053\012\102\032" +
    "\051\064\262\001\002\000\004\016\270\001\002\000\004" +
    "\016\264\001\002\000\004\070\265\001\002\000\052\007" +
    "\ufffd\012\ufffd\015\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\051\ufffd\062\ufffd\063\ufffd\064" +
    "\ufffd\065\ufffd\071\ufffd\072\ufffd\073\ufffd\076\ufffd\077\ufffd" +
    "\001\002\000\052\007\053\012\102\015\056\024\073\025" +
    "\065\026\054\027\106\030\055\031\063\032\051\051\060" +
    "\062\061\063\110\064\116\065\070\071\267\072\105\073" +
    "\050\076\112\077\103\001\002\000\004\020\uff9c\001\002" +
    "\000\004\070\271\001\002\000\052\007\ufffd\012\ufffd\015" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\051\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\071" +
    "\ufffd\072\ufffd\073\ufffd\076\ufffd\077\ufffd\001\002\000\052" +
    "\007\053\012\102\015\056\024\073\025\065\026\054\027" +
    "\106\030\055\031\063\032\051\051\060\062\061\063\110" +
    "\064\116\065\070\071\273\072\105\073\050\076\112\077" +
    "\103\001\002\000\004\020\uff9b\001\002\000\032\002\000" +
    "\021\007\022\010\023\012\033\031\035\014\036\023\037" +
    "\027\040\011\041\026\042\021\064\016\001\002\000\006" +
    "\020\uffea\056\206\001\002\000\004\020\uffec\001\002\000" +
    "\004\020\uffeb\001\002\000\022\033\031\035\014\036\023" +
    "\037\027\040\011\041\026\042\021\064\016\001\002\000" +
    "\004\020\uffe5\001\002\000\004\012\303\001\002\000\024" +
    "\013\uffa1\033\031\035\014\036\023\037\027\040\011\041" +
    "\026\042\021\064\016\001\002\000\010\011\312\013\uffa2" +
    "\016\uffa2\001\002\000\004\064\311\001\002\000\004\013" +
    "\310\001\002\000\010\011\uff9f\013\uff9f\016\uff9f\001\002" +
    "\000\004\020\uffe6\001\002\000\010\011\uff9e\013\uff9e\016" +
    "\uff9e\001\002\000\022\033\031\035\014\036\023\037\027" +
    "\040\011\041\026\042\021\064\016\001\002\000\010\011" +
    "\uffa0\013\uffa0\016\uffa0\001\002\000\004\064\uffb4\001\002" +
    "\000\004\064\uffb3\001\002\000\004\064\317\001\002\000" +
    "\004\015\320\001\002\000\024\016\uffa1\033\031\035\014" +
    "\036\023\037\027\040\011\041\026\042\021\064\016\001" +
    "\002\000\004\016\322\001\002\000\004\012\323\001\002" +
    "\000\066\007\uffed\012\uffed\015\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\051\uffed\062" +
    "\uffed\063\uffed\064\uffed\065\uffed\072\uffed\073\uffed\076\uffed" +
    "\077\uffed\001\002\000\066\007\053\012\102\015\056\024" +
    "\073\025\065\026\054\027\106\030\055\031\063\032\051" +
    "\033\031\035\014\036\023\037\027\040\011\041\026\042" +
    "\021\051\060\062\061\063\110\064\113\065\070\072\105" +
    "\073\050\076\112\077\103\001\002\000\004\020\326\001" +
    "\002\000\052\007\ufffd\012\ufffd\013\ufffd\015\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\051" +
    "\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\072\ufffd\073\ufffd" +
    "\076\ufffd\077\ufffd\001\002\000\052\007\053\012\102\013" +
    "\330\015\056\024\073\025\065\026\054\027\106\030\055" +
    "\031\063\032\051\051\060\062\061\063\110\064\116\065" +
    "\070\072\105\073\050\076\112\077\103\001\002\000\004" +
    "\020\uffef\001\002\000\034\002\ufff5\017\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\033\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\064\ufff5\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\024\004\005\005\016\013\021\014\017\015\024" +
    "\016\031\021\012\023\027\024\014\001\001\000\002\001" +
    "\001\000\012\021\314\023\027\024\014\025\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\277\023" +
    "\027\024\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\021\033\022\035\023" +
    "\027\024\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\033\022" +
    "\040\023\027\024\014\001\001\000\002\001\001\000\012" +
    "\021\033\022\042\023\027\024\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\045\001\001\000\054" +
    "\007\071\013\061\017\100\020\075\021\012\023\027\024" +
    "\014\026\070\027\065\030\106\031\046\034\051\043\076" +
    "\044\103\045\066\047\074\051\110\052\077\055\073\056" +
    "\056\057\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\017\100\020" +
    "\075\026\117\027\065\030\106\031\046\032\254\033\116" +
    "\034\051\047\074\055\114\056\056\057\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\017\100\020\075" +
    "\026\252\027\065\030\106\031\046\034\051\047\074\055" +
    "\114\056\056\057\063\001\001\000\002\001\001\000\030" +
    "\017\100\020\075\026\236\027\065\030\106\031\046\034" +
    "\051\047\074\055\114\056\056\057\063\001\001\000\030" +
    "\017\100\020\075\026\235\027\065\030\106\031\046\034" +
    "\051\047\074\055\114\056\056\057\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\017\100\020" +
    "\075\026\213\027\065\030\106\031\046\034\051\047\074" +
    "\055\114\056\056\057\063\001\001\000\004\010\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\017\100\020" +
    "\075\026\175\027\065\030\106\031\046\034\051\035\176" +
    "\036\177\037\174\047\074\055\114\056\056\057\063\001" +
    "\001\000\004\046\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\017\100\020\075\026\117\027\065\030\106\031" +
    "\046\032\120\033\116\034\051\047\074\055\114\056\056" +
    "\057\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\017\100\020\075\026\155\027\065\030" +
    "\106\031\046\034\051\047\074\055\114\056\056\057\063" +
    "\001\001\000\030\017\100\020\075\026\154\027\065\030" +
    "\106\031\046\034\051\047\074\055\114\056\056\057\063" +
    "\001\001\000\030\017\100\020\075\026\153\027\065\030" +
    "\106\031\046\034\051\047\074\055\114\056\056\057\063" +
    "\001\001\000\030\017\100\020\075\026\152\027\065\030" +
    "\106\031\046\034\051\047\074\055\114\056\056\057\063" +
    "\001\001\000\030\017\100\020\075\026\151\027\065\030" +
    "\106\031\046\034\051\047\074\055\114\056\056\057\063" +
    "\001\001\000\030\017\100\020\075\026\150\027\065\030" +
    "\106\031\046\034\051\047\074\055\114\056\056\057\063" +
    "\001\001\000\030\017\100\020\075\026\147\027\065\030" +
    "\106\031\046\034\051\047\074\055\114\056\056\057\063" +
    "\001\001\000\030\017\100\020\075\026\146\027\065\030" +
    "\106\031\046\034\051\047\074\055\114\056\056\057\063" +
    "\001\001\000\030\017\100\020\075\026\145\027\065\030" +
    "\106\031\046\034\051\047\074\055\114\056\056\057\063" +
    "\001\001\000\002\001\001\000\030\017\100\020\075\026" +
    "\143\027\065\030\106\031\046\034\051\047\074\055\114" +
    "\056\056\057\063\001\001\000\030\017\100\020\075\026" +
    "\142\027\065\030\106\031\046\034\051\047\074\055\114" +
    "\056\056\057\063\001\001\000\030\017\100\020\075\026" +
    "\141\027\065\030\106\031\046\034\051\047\074\055\114" +
    "\056\056\057\063\001\001\000\030\017\100\020\075\026" +
    "\140\027\065\030\106\031\046\034\051\047\074\055\114" +
    "\056\056\057\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\017" +
    "\100\020\075\026\157\027\065\030\106\031\046\034\051" +
    "\047\074\055\114\056\056\057\063\001\001\000\002\001" +
    "\001\000\030\017\100\020\075\026\161\027\065\030\106" +
    "\031\046\034\051\047\074\055\114\056\056\057\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\017\100" +
    "\020\075\026\164\027\065\030\106\031\046\034\051\047" +
    "\074\055\114\056\056\057\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\167\001\001\000\044\007" +
    "\170\017\100\020\075\026\070\027\065\030\106\031\046" +
    "\034\051\043\076\044\103\045\066\047\074\051\110\052" +
    "\077\055\073\056\056\057\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\017\100\020\075\026\175\027\065\030" +
    "\106\031\046\034\051\037\201\047\074\055\114\056\056" +
    "\057\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\017\100\020\075\026\204\027\065\030\106\031\046" +
    "\034\051\047\074\055\114\056\056\057\063\001\001\000" +
    "\002\001\001\000\030\017\100\020\075\026\207\027\065" +
    "\030\106\031\046\034\051\047\074\055\114\056\056\057" +
    "\063\001\001\000\002\001\001\000\004\011\210\001\001" +
    "\000\002\001\001\000\030\017\100\020\075\026\212\027" +
    "\065\030\106\031\046\034\051\047\074\055\114\056\056" +
    "\057\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\215\001\001\000\044\007\170\017\100\020\075" +
    "\026\070\027\065\030\106\031\046\034\051\043\076\044" +
    "\103\045\066\047\074\051\110\052\077\055\073\056\056" +
    "\057\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\017\100\020\075\026\221\027\065\030\106\031\046" +
    "\034\051\047\074\055\114\056\056\057\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\224\001\001" +
    "\000\046\007\170\017\100\020\075\026\070\027\065\030" +
    "\106\031\046\034\051\043\076\044\103\045\066\047\074" +
    "\051\110\052\077\053\225\055\073\056\056\057\063\001" +
    "\001\000\004\054\230\001\001\000\004\006\233\001\001" +
    "\000\004\006\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\007\170\017\100\020\075\026\070\027\065" +
    "\030\106\031\046\034\051\043\076\044\103\045\066\047" +
    "\074\051\110\052\077\055\073\056\056\057\063\001\001" +
    "\000\044\007\170\017\100\020\075\026\070\027\065\030" +
    "\106\031\046\034\051\043\076\044\103\045\066\047\074" +
    "\051\110\052\077\055\073\056\056\057\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\017\100\020\075\026\241\027\065\030\106\031\046\034" +
    "\051\047\074\055\114\056\056\057\063\001\001\000\030" +
    "\017\100\020\075\026\250\027\065\030\106\031\046\034" +
    "\051\047\074\055\114\056\056\057\063\001\001\000\002" +
    "\001\001\000\030\017\100\020\075\026\245\027\065\030" +
    "\106\031\046\034\051\047\074\055\114\056\056\057\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\262\031\046\034\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\265\001\001\000\044\007\170\017\100\020\075\026" +
    "\070\027\065\030\106\031\046\034\051\043\076\044\103" +
    "\045\066\047\074\051\110\052\077\055\073\056\056\057" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\271\001\001\000\044\007\170\017\100\020\075\026" +
    "\070\027\065\030\106\031\046\034\051\043\076\044\103" +
    "\045\066\047\074\051\110\052\077\055\073\056\056\057" +
    "\063\001\001\000\002\001\001\000\022\004\005\013\021" +
    "\014\017\015\024\016\031\021\012\023\027\024\014\001" +
    "\001\000\006\010\276\060\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\300\023\027\024\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\021\304" +
    "\023\027\024\014\040\305\041\303\042\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\021" +
    "\304\023\027\024\014\042\312\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\021\304\023\027\024\014\040\320" +
    "\041\303\042\306\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\323\001\001\000\054\007\324\013\061" +
    "\017\100\020\075\021\012\023\027\024\014\026\070\027" +
    "\065\030\106\031\046\034\051\043\076\044\103\045\066" +
    "\047\074\051\110\052\077\055\073\056\056\057\063\001" +
    "\001\000\002\001\001\000\004\006\326\001\001\000\044" +
    "\007\170\017\100\020\075\026\070\027\065\030\106\031" +
    "\046\034\051\043\076\044\103\045\066\047\074\051\110" +
    "\052\077\055\073\056\056\057\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public Boolean syntaxErrors = false;

  public void syntax_error(Symbol current_token){
  report_error("Syntax error at line " + (current_token.left+1) +
  ", column " + current_token.right + "\n", null);
  }
  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declarations main declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= MAIN LBRACE variable_declarations statement SEMICOLON statements RBRACE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statements statement SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= io_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= settable assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarations ::= declarations declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration ::= function_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration ::= alias_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= type_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_declaration ::= FDEF ftype IDENTIFIER LPAREN type_id_contents RPAREN LBRACE variable_declarations statement SEMICOLON statements RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variable_declarations ::= variable_declarations variable_declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarations",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variable_declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarations",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variable_declaration ::= type IDENTIFIER initialised 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // initialised ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialised",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // initialised ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialised",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assignment ::= ASSIGNMENT expression multiple_assignments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // multiple_assignments ::= multiple_assignments COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignments",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // multiple_assignments ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignments",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_declaration ::= TDEF IDENTIFIER LBRACE type_id_contents RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // alias_declaration ::= ALIAS type type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= collection 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= evaluable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= slice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= settable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // slice ::= index_access LBRACKET expression COLON expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // slice ::= index_access LBRACKET COLON expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // slice ::= index_access LBRACKET expression COLON RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // slice ::= index_access LBRACKET COLON RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // settable ::= dot_access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("settable",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // settable ::= index_access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("settable",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dot_access ::= expression DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dot_access",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // index_access ::= index_access LBRACKET expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_access",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // index_access ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_access",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // item ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // item ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // item ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // item ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // item ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // collection ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // collection ::= dict_start 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // collection ::= sequence_start 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // evaluable ::= NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // evaluable ::= LEN LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // evaluable ::= MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // evaluable ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // evaluable ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // evaluable ::= expression AND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // evaluable ::= expression DIV expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // evaluable ::= expression EQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // evaluable ::= expression IN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // evaluable ::= expression LANGLE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // evaluable ::= expression LTEQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // evaluable ::= expression MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // evaluable ::= expression MULT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // evaluable ::= expression NEQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // evaluable ::= expression OR expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // evaluable ::= expression PLUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // evaluable ::= expression POW expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // evaluable ::= expression APPEND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type ::= BOOLEAN_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type ::= CHAR_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type ::= dict_t 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type ::= FLOAT_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type ::= INT_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // type ::= RATIONAL_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // type ::= sequence_t 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ftype ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftype",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ftype ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftype",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // type_with_top ::= TOP_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_top",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // type_with_top ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_top",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // function_call ::= IDENTIFIER LPAREN sequence_contents RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sequence_t ::= SEQ_T LANGLE type_with_top RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_t",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sequence_start ::= LBRACKET sequence_contents RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_start",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sequence_contents ::= sequence_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_contents",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sequence_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_contents",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sequence_body ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_body",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sequence_body ::= sequence_body COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_body",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // dict_t ::= DICT_T LANGLE type_with_top COMMA type_with_top RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_t",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // dict_start ::= LBRACE dict_contents RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_start",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // dict_contents ::= dict_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_contents",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // dict_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_contents",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dict_body ::= dict_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // dict_body ::= dict_body COMMA dict_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dict_value ::= expression COLON expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_value",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // type_id_contents ::= type_id_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_contents",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // type_id_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_contents",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // type_id_body ::= type_id_body COMMA type_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_body",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // type_id_body ::= type_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_body",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // type_id ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // while ::= WHILE LPAREN expression RPAREN DO statements OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // for ::= FORALL LPAREN IDENTIFIER IN collection RPAREN DO statements OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for ::= FORALL LPAREN IDENTIFIER IN IDENTIFIER RPAREN DO statements OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // if ::= IF LPAREN expression RPAREN THEN statements elif else FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // elif ::= elif ELIF statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // elif ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // else ::= ELSE statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // else ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // return ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // return ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // io_op ::= PRINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io_op",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // io_op ::= READ named_ent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io_op",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
