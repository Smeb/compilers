
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\005\000\002\005" +
    "\012\000\002\006\005\000\002\006\002\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\004\000\002" +
    "\003\005\000\002\003\002\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\014\016" +
    "\000\002\012\005\000\002\012\002\000\002\013\005\000" +
    "\002\060\003\000\002\060\002\000\002\010\005\000\002" +
    "\011\005\000\002\011\002\000\002\015\007\000\002\016" +
    "\005\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\025\003\000\002\025\003\000\002\022\003\000" +
    "\002\022\003\000\002\030\005\000\002\030\004\000\002" +
    "\030\006\000\002\030\004\000\002\030\005\000\002\030" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\031\006\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\024\006\000\002\032\005\000" +
    "\002\033\003\000\002\033\002\000\002\034\003\000\002" +
    "\034\005\000\002\023\010\000\002\035\005\000\002\036" +
    "\003\000\002\036\002\000\002\050\005\000\002\037\003" +
    "\000\002\037\005\000\002\040\005\000\002\041\003\000" +
    "\002\041\002\000\002\042\005\000\002\042\003\000\002" +
    "\043\004\000\002\044\011\000\002\045\013\000\002\054" +
    "\011\000\002\055\005\000\002\056\005\000\002\056\002" +
    "\000\002\057\004\000\002\057\002\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\051\006\000\002\053" +
    "\004\000\002\053\003\000\002\046\003\000\002\046\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\032\017\ufff4\021\005\022\006\023\010\033" +
    "\027\035\012\036\021\037\025\040\007\041\024\042\017" +
    "\064\014\001\002\000\004\020\311\001\002\000\024\033" +
    "\027\035\012\036\021\037\025\040\007\041\024\042\017" +
    "\043\274\064\014\001\002\000\004\064\262\001\002\000" +
    "\030\006\uffd8\011\uffd8\020\uffd8\033\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\064\uffd8\001\002\000" +
    "\022\033\027\035\012\036\021\037\025\040\007\041\024" +
    "\042\017\064\014\001\002\000\004\064\255\001\002\000" +
    "\030\006\uffdb\011\uffdb\020\uffdb\033\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\064\uffdb\001\002\000" +
    "\030\006\uffd5\011\uffd5\020\uffd5\033\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\064\uffd5\001\002\000" +
    "\030\006\uffdc\011\uffdc\020\uffdc\033\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\064\uffdc\001\002\000" +
    "\004\002\254\001\002\000\004\020\ufff3\001\002\000\030" +
    "\006\uffd6\011\uffd6\020\uffd6\033\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\064\uffd6\001\002\000\004" +
    "\020\ufff2\001\002\000\030\006\uffda\011\uffda\020\uffda\033" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\064\uffda\001\002\000\004\017\044\001\002\000\004\020" +
    "\ufff0\001\002\000\030\006\uffd7\011\uffd7\020\uffd7\033\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\064" +
    "\uffd7\001\002\000\004\005\036\001\002\000\030\006\uffd9" +
    "\011\uffd9\020\uffd9\033\uffd9\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\064\uffd9\001\002\000\004\005\031" +
    "\001\002\000\004\020\ufff1\001\002\000\024\033\027\034" +
    "\033\035\012\036\021\037\025\040\007\041\024\042\017" +
    "\064\014\001\002\000\006\006\uffd1\011\uffd1\001\002\000" +
    "\006\006\uffd2\011\uffd2\001\002\000\004\006\035\001\002" +
    "\000\030\006\uffb9\011\uffb9\020\uffb9\033\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\064\uffb9\001\002" +
    "\000\024\033\027\034\033\035\012\036\021\037\025\040" +
    "\007\041\024\042\017\064\014\001\002\000\004\011\040" +
    "\001\002\000\024\033\027\034\033\035\012\036\021\037" +
    "\025\040\007\041\024\042\017\064\014\001\002\000\004" +
    "\006\042\001\002\000\030\006\uffb3\011\uffb3\020\uffb3\033" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\064\uffb3\001\002\000\032\002\ufff4\021\005\022\006\023" +
    "\010\033\027\035\012\036\021\037\025\040\007\041\024" +
    "\042\017\064\014\001\002\000\004\012\045\001\002\000" +
    "\066\007\uffed\012\uffed\015\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\051\uffed\062\uffed" +
    "\063\uffed\064\uffed\065\uffed\072\uffed\073\uffed\076\uffed\077" +
    "\uffed\001\002\000\066\007\053\012\101\015\056\024\072" +
    "\025\063\026\054\027\105\030\055\031\062\032\051\033" +
    "\027\035\012\036\021\037\025\040\007\041\024\042\017" +
    "\051\057\062\060\063\107\064\113\065\066\072\104\073" +
    "\050\076\111\077\102\001\002\000\054\005\uffba\007\uffba" +
    "\010\uffba\011\uffba\013\uffba\014\uffba\016\uffba\020\uffba\044" +
    "\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\057\uffba\060\uffba\061\uffba\001" +
    "\002\000\004\015\242\001\002\000\054\005\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\013\uffbc\014\uffbc\016\uffbc\020\uffbc\044" +
    "\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc" +
    "\053\uffbc\054\uffbc\055\uffbc\057\uffbc\060\uffbc\061\uffbc\001" +
    "\002\000\054\005\uffbb\007\uffbb\010\uffbb\011\uffbb\013\uffbb" +
    "\014\uffbb\016\uffbb\020\uffbb\044\uffbb\045\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\001\002\000\036\007\053\010" +
    "\uffb6\012\101\015\056\025\063\026\054\027\105\030\055" +
    "\031\062\032\051\051\057\062\060\063\107\064\115\001" +
    "\002\000\052\005\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1" +
    "\016\uffe1\020\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\057\uffe1" +
    "\060\uffe1\061\uffe1\001\002\000\052\005\uffdf\010\uffdf\011" +
    "\uffdf\013\uffdf\014\uffdf\016\uffdf\020\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\057\uffdf\060\uffdf\061\uffdf\001\002\000\034" +
    "\007\053\012\101\015\056\025\063\026\054\027\105\030" +
    "\055\031\062\032\051\051\057\062\060\063\107\064\115" +
    "\001\002\000\034\007\053\012\101\015\056\025\063\026" +
    "\054\027\105\030\055\031\062\032\051\051\057\062\060" +
    "\063\107\064\115\001\002\000\034\007\053\012\101\015" +
    "\056\025\063\026\054\027\105\030\055\031\062\032\051" +
    "\051\057\062\060\063\107\064\115\001\002\000\004\020" +
    "\233\001\002\000\052\005\uffde\010\uffde\011\uffde\013\uffde" +
    "\014\uffde\016\uffde\020\uffde\044\uffde\045\uffde\046\uffde\047" +
    "\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde" +
    "\057\uffde\060\uffde\061\uffde\001\002\000\052\005\uffdd\010" +
    "\uffdd\011\uffdd\013\uffdd\014\uffdd\016\uffdd\020\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\057\uffdd\060\uffdd\061\uffdd\001\002" +
    "\000\052\005\uffe2\010\uffe2\011\uffe2\013\uffe2\014\uffe2\016" +
    "\uffe2\020\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\001\002\000\004\020\ufffc\001\002\000\004" +
    "\015\216\001\002\000\012\007\uff9c\016\uff9c\020\uff9c\056" +
    "\uff9c\001\002\000\040\005\132\020\ufff7\044\124\045\136" +
    "\046\135\047\127\050\140\051\125\052\131\053\133\054" +
    "\141\055\134\057\126\060\164\061\137\001\002\000\004" +
    "\020\212\001\002\000\036\007\053\012\101\015\056\020" +
    "\uff96\025\063\026\054\027\105\030\055\031\062\032\051" +
    "\051\057\062\060\063\107\064\115\001\002\000\012\007" +
    "\uff9d\016\uff9d\020\uff9d\056\uff9d\001\002\000\052\005\uffe4" +
    "\010\uffe4\011\uffe4\013\uffe4\014\uffe4\016\uffe4\020\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\057\uffe4\060\uffe4\061\uffe4\001" +
    "\002\000\004\020\ufffa\001\002\000\006\007\uff9b\056\202" +
    "\001\002\000\044\005\uffe3\007\uff9a\016\uff9a\020\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\057\uffe3\060\uffe3\061\uffe3\001" +
    "\002\000\004\007\177\001\002\000\036\007\053\012\101" +
    "\013\uffb0\015\056\025\063\026\054\027\105\030\055\031" +
    "\062\032\051\051\057\062\060\063\107\064\115\001\002" +
    "\000\034\007\053\012\101\015\056\025\063\026\054\027" +
    "\105\030\055\031\062\032\051\051\057\062\060\063\107" +
    "\064\156\001\002\000\004\020\ufff9\001\002\000\004\015" +
    "\150\001\002\000\052\005\uffe0\010\uffe0\011\uffe0\013\uffe0" +
    "\014\uffe0\016\uffe0\020\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\001\002\000\044\005\uffcb\007" +
    "\uff99\016\uff99\020\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\057" +
    "\uffcb\060\uffcb\061\uffcb\001\002\000\004\015\145\001\002" +
    "\000\004\020\ufff8\001\002\000\004\020\uff95\001\002\000" +
    "\004\020\ufffb\001\002\000\012\007\uff9e\015\114\056\uff9e" +
    "\064\uffdc\001\002\000\036\007\053\012\101\015\056\016" +
    "\uffb6\025\063\026\054\027\105\030\055\031\062\032\051" +
    "\051\057\062\060\063\107\064\115\001\002\000\004\015" +
    "\114\001\002\000\052\005\uffcb\010\uffcb\011\uffcb\013\uffcb" +
    "\014\uffcb\016\uffcb\020\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\057\uffcb\060\uffcb\061\uffcb\001\002\000\010\010\uffb7\011" +
    "\143\016\uffb7\001\002\000\042\005\132\010\uffb5\011\uffb5" +
    "\016\uffb5\044\124\045\136\046\135\047\127\050\140\051" +
    "\125\052\131\053\133\054\141\055\134\057\126\061\137" +
    "\001\002\000\052\005\uffe3\010\uffe3\011\uffe3\013\uffe3\014" +
    "\uffe3\016\uffe3\020\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\057" +
    "\uffe3\060\uffe3\061\uffe3\001\002\000\004\016\123\001\002" +
    "\000\054\005\uffbd\007\uffbd\010\uffbd\011\uffbd\013\uffbd\014" +
    "\uffbd\016\uffbd\020\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\001\002\000\034\007\uffca\012\uffca" +
    "\015\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\051\uffca\062\uffca\063\uffca\064\uffca\001\002\000\034" +
    "\007\uffc4\012\uffc4\015\uffc4\025\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\051\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\001\002\000\034\007\uffbf\012\uffbf\015\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\051\uffbf\062\uffbf" +
    "\063\uffbf\064\uffbf\001\002\000\034\007\uffc7\012\uffc7\015" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\051\uffc7\062\uffc7\063\uffc7\064\uffc7\001\002\000\034\007" +
    "\053\012\101\015\056\025\063\026\054\027\105\030\055" +
    "\031\062\032\051\051\057\062\060\063\107\064\115\001" +
    "\002\000\034\007\uffc3\012\uffc3\015\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\051\uffc3\062\uffc3\063" +
    "\uffc3\064\uffc3\001\002\000\034\007\uffc6\012\uffc6\015\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\051" +
    "\uffc6\062\uffc6\063\uffc6\064\uffc6\001\002\000\034\007\uffc2" +
    "\012\uffc2\015\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\051\uffc2\062\uffc2\063\uffc2\064\uffc2\001\002" +
    "\000\034\007\uffc0\012\uffc0\015\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\051\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\001\002\000\034\007\uffc8\012\uffc8\015\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\051\uffc8" +
    "\062\uffc8\063\uffc8\064\uffc8\001\002\000\034\007\uffc9\012" +
    "\uffc9\015\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\051\uffc9\062\uffc9\063\uffc9\064\uffc9\001\002\000" +
    "\034\007\uffbe\012\uffbe\015\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\051\uffbe\062\uffbe\063\uffbe\064" +
    "\uffbe\001\002\000\034\007\uffc5\012\uffc5\015\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\051\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\001\002\000\034\007\uffc1\012\uffc1" +
    "\015\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\051\uffc1\062\uffc1\063\uffc1\064\uffc1\001\002\000\052" +
    "\005\132\010\uffd0\011\uffd0\013\uffd0\014\uffd0\016\uffd0\020" +
    "\uffd0\044\124\045\136\046\135\047\127\050\140\051\125" +
    "\052\131\053\133\054\141\055\134\057\126\060\uffd0\061" +
    "\137\001\002\000\034\007\053\012\101\015\056\025\063" +
    "\026\054\027\105\030\055\031\062\032\051\051\057\062" +
    "\060\063\107\064\115\001\002\000\042\005\132\010\uffb4" +
    "\011\uffb4\016\uffb4\044\124\045\136\046\135\047\127\050" +
    "\140\051\125\052\131\053\133\054\141\055\134\057\126" +
    "\061\137\001\002\000\034\007\053\012\101\015\056\025" +
    "\063\026\054\027\105\030\055\031\062\032\051\051\057" +
    "\062\060\063\107\064\115\001\002\000\036\005\132\016" +
    "\147\044\124\045\136\046\135\047\127\050\140\051\125" +
    "\052\131\053\133\054\141\055\134\057\126\061\137\001" +
    "\002\000\052\005\uffce\010\uffce\011\uffce\013\uffce\014\uffce" +
    "\016\uffce\020\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\057\uffce" +
    "\060\uffce\061\uffce\001\002\000\034\007\053\012\101\015" +
    "\056\025\063\026\054\027\105\030\055\031\062\032\051" +
    "\051\057\062\060\063\107\064\115\001\002\000\036\005" +
    "\132\016\152\044\124\045\136\046\135\047\127\050\140" +
    "\051\125\052\131\053\133\054\141\055\134\057\126\061" +
    "\137\001\002\000\004\070\153\001\002\000\052\007\053" +
    "\012\101\015\056\024\072\025\063\026\054\027\105\030" +
    "\055\031\062\032\051\051\057\062\060\063\107\064\156" +
    "\065\066\071\ufffd\072\104\073\050\076\111\077\102\001" +
    "\002\000\004\071\161\001\002\000\004\020\157\001\002" +
    "\000\014\007\uff9e\015\114\016\uff9e\020\uff9e\056\uff9e\001" +
    "\002\000\064\007\053\012\101\013\ufffd\015\056\024\072" +
    "\025\063\026\054\027\105\030\055\031\062\032\051\051" +
    "\057\062\060\063\107\064\156\065\066\066\ufffd\067\ufffd" +
    "\070\ufffd\071\ufffd\072\104\073\050\074\ufffd\076\111\077" +
    "\102\001\002\000\016\013\ufffe\066\ufffe\067\ufffe\070\ufffe" +
    "\071\ufffe\074\ufffe\001\002\000\004\020\uffa6\001\002\000" +
    "\006\007\uff9b\020\uff94\001\002\000\036\005\132\044\124" +
    "\045\136\046\135\047\127\050\140\051\125\052\131\053" +
    "\133\054\141\055\134\057\126\060\164\061\137\001\002" +
    "\000\004\064\165\001\002\000\012\007\uffaf\016\uffaf\020" +
    "\uffaf\056\uffaf\001\002\000\006\011\uffae\013\uffae\001\002" +
    "\000\036\005\132\014\175\044\124\045\136\046\135\047" +
    "\127\050\140\051\125\052\131\053\133\054\141\055\134" +
    "\057\126\061\137\001\002\000\004\013\174\001\002\000" +
    "\006\011\172\013\uffb1\001\002\000\034\007\053\012\101" +
    "\015\056\025\063\026\054\027\105\030\055\031\062\032" +
    "\051\051\057\062\060\063\107\064\115\001\002\000\006" +
    "\011\uffad\013\uffad\001\002\000\054\005\uffb2\007\uffb2\010" +
    "\uffb2\011\uffb2\013\uffb2\014\uffb2\016\uffb2\020\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\057\uffb2\060\uffb2\061\uffb2\001\002" +
    "\000\034\007\053\012\101\015\056\025\063\026\054\027" +
    "\105\030\055\031\062\032\051\051\057\062\060\063\107" +
    "\064\115\001\002\000\040\005\132\011\uffac\013\uffac\044" +
    "\124\045\136\046\135\047\127\050\140\051\125\052\131" +
    "\053\133\054\141\055\134\057\126\061\137\001\002\000" +
    "\034\007\053\012\101\015\056\025\063\026\054\027\105" +
    "\030\055\031\062\032\051\051\057\062\060\063\107\064" +
    "\115\001\002\000\036\005\132\010\201\044\124\045\136" +
    "\046\135\047\127\050\140\051\125\052\131\053\133\054" +
    "\141\055\134\057\126\061\137\001\002\000\012\007\uff98" +
    "\016\uff98\020\uff98\056\uff98\001\002\000\034\007\053\012" +
    "\101\015\056\025\063\026\054\027\105\030\055\031\062" +
    "\032\051\051\057\062\060\063\107\064\115\001\002\000" +
    "\004\020\ufff6\001\002\000\040\005\132\011\206\020\uffe7" +
    "\044\124\045\136\046\135\047\127\050\140\051\125\052" +
    "\131\053\133\054\141\055\134\057\126\061\137\001\002" +
    "\000\004\020\uffe9\001\002\000\034\007\053\012\101\015" +
    "\056\025\063\026\054\027\105\030\055\031\062\032\051" +
    "\051\057\062\060\063\107\064\115\001\002\000\040\005" +
    "\132\011\206\020\uffe7\044\124\045\136\046\135\047\127" +
    "\050\140\051\125\052\131\053\133\054\141\055\134\057" +
    "\126\061\137\001\002\000\004\020\uffe8\001\002\000\036" +
    "\005\132\020\uff97\044\124\045\136\046\135\047\127\050" +
    "\140\051\125\052\131\053\133\054\141\055\134\057\126" +
    "\061\137\001\002\000\052\007\053\012\101\013\ufffd\015" +
    "\056\024\072\025\063\026\054\027\105\030\055\031\062" +
    "\032\051\051\057\062\060\063\107\064\156\065\066\072" +
    "\104\073\050\076\111\077\102\001\002\000\004\013\214" +
    "\001\002\000\004\020\215\001\002\000\032\002\uffff\021" +
    "\uffff\022\uffff\023\uffff\033\uffff\035\uffff\036\uffff\037\uffff" +
    "\040\uffff\041\uffff\042\uffff\064\uffff\001\002\000\034\007" +
    "\053\012\101\015\056\025\063\026\054\027\105\030\055" +
    "\031\062\032\051\051\057\062\060\063\107\064\115\001" +
    "\002\000\036\005\132\016\220\044\124\045\136\046\135" +
    "\047\127\050\140\051\125\052\131\053\133\054\141\055" +
    "\134\057\126\061\137\001\002\000\004\075\221\001\002" +
    "\000\056\007\053\012\101\015\056\024\072\025\063\026" +
    "\054\027\105\030\055\031\062\032\051\051\057\062\060" +
    "\063\107\064\156\065\066\066\ufffd\067\ufffd\072\104\073" +
    "\050\074\ufffd\076\111\077\102\001\002\000\010\066\uffa1" +
    "\067\uffa1\074\uffa1\001\002\000\004\020\uffa4\001\002\000" +
    "\010\066\uff9f\067\226\074\225\001\002\000\052\007\053" +
    "\012\101\015\056\024\072\025\063\026\054\027\105\030" +
    "\055\031\062\032\051\051\057\062\060\063\107\064\156" +
    "\065\066\066\ufffd\072\104\073\050\076\111\077\102\001" +
    "\002\000\056\007\053\012\101\015\056\024\072\025\063" +
    "\026\054\027\105\030\055\031\062\032\051\051\057\062" +
    "\060\063\107\064\156\065\066\066\ufffd\067\ufffd\072\104" +
    "\073\050\074\ufffd\076\111\077\102\001\002\000\004\066" +
    "\230\001\002\000\004\020\uffa3\001\002\000\010\066\uffa2" +
    "\067\uffa2\074\uffa2\001\002\000\004\066\uffa0\001\002\000" +
    "\066\007\uffee\012\uffee\015\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\042\uffee\051\uffee\062\uffee" +
    "\063\uffee\064\uffee\065\uffee\072\uffee\073\uffee\076\uffee\077" +
    "\uffee\001\002\000\042\010\uffcf\011\uffcf\013\uffcf\014\uffcf" +
    "\016\uffcf\020\uffcf\044\uffcf\045\uffcf\047\uffcf\051\uffcf\052" +
    "\uffcf\054\uffcf\055\uffcf\057\uffcf\060\uffcf\061\uffcf\001\002" +
    "\000\052\005\132\010\uffcd\011\uffcd\013\uffcd\014\uffcd\016" +
    "\uffcd\020\uffcd\044\uffcd\045\uffcd\046\135\047\127\050\140" +
    "\051\uffcd\052\uffcd\053\133\054\uffcd\055\uffcd\057\126\060" +
    "\uffcd\061\uffcd\001\002\000\036\005\132\016\237\044\124" +
    "\045\136\046\135\047\127\050\140\051\125\052\131\053" +
    "\133\054\141\055\134\057\126\061\137\001\002\000\052" +
    "\005\uffcc\010\uffcc\011\uffcc\013\uffcc\014\uffcc\016\uffcc\020" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\055\uffcc\057\uffcc\060\uffcc\061" +
    "\uffcc\001\002\000\004\010\241\001\002\000\054\005\uffb8" +
    "\007\uffb8\010\uffb8\011\uffb8\013\uffb8\014\uffb8\016\uffb8\020" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\001\002\000\004\064\243\001\002\000\004\047\244" +
    "\001\002\000\034\007\053\012\101\015\056\025\063\026" +
    "\054\027\105\030\055\031\062\032\051\051\057\062\060" +
    "\063\107\064\156\001\002\000\006\007\uff9b\016\uff9b\001" +
    "\002\000\006\007\177\016\247\001\002\000\004\070\250" +
    "\001\002\000\052\007\053\012\101\015\056\024\072\025" +
    "\063\026\054\027\105\030\055\031\062\032\051\051\057" +
    "\062\060\063\107\064\156\065\066\070\ufffd\072\104\073" +
    "\050\076\111\077\102\001\002\000\004\070\252\001\002" +
    "\000\004\020\uffa5\001\002\000\004\002\000\001\002\000" +
    "\004\002\001\001\002\000\006\020\uffea\056\202\001\002" +
    "\000\004\020\uffec\001\002\000\004\020\uffeb\001\002\000" +
    "\022\033\027\035\012\036\021\037\025\040\007\041\024" +
    "\042\017\064\014\001\002\000\004\020\uffe5\001\002\000" +
    "\004\012\263\001\002\000\024\013\uffaa\033\027\035\012" +
    "\036\021\037\025\040\007\041\024\042\017\064\014\001" +
    "\002\000\010\011\272\013\uffab\016\uffab\001\002\000\004" +
    "\064\271\001\002\000\004\013\270\001\002\000\010\011" +
    "\uffa8\013\uffa8\016\uffa8\001\002\000\004\020\uffe6\001\002" +
    "\000\010\011\uffa7\013\uffa7\016\uffa7\001\002\000\022\033" +
    "\027\035\012\036\021\037\025\040\007\041\024\042\017" +
    "\064\014\001\002\000\010\011\uffa9\013\uffa9\016\uffa9\001" +
    "\002\000\004\064\uffd4\001\002\000\004\064\uffd3\001\002" +
    "\000\004\064\277\001\002\000\004\015\300\001\002\000" +
    "\024\016\uffaa\033\027\035\012\036\021\037\025\040\007" +
    "\041\024\042\017\064\014\001\002\000\004\016\302\001" +
    "\002\000\004\012\303\001\002\000\066\007\uffed\012\uffed" +
    "\015\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\033\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\uffed\051\uffed\062\uffed\063\uffed\064\uffed\065" +
    "\uffed\072\uffed\073\uffed\076\uffed\077\uffed\001\002\000\066" +
    "\007\053\012\101\015\056\024\072\025\063\026\054\027" +
    "\105\030\055\031\062\032\051\033\027\035\012\036\021" +
    "\037\025\040\007\041\024\042\017\051\057\062\060\063" +
    "\107\064\113\065\066\072\104\073\050\076\111\077\102" +
    "\001\002\000\004\020\306\001\002\000\052\007\053\012" +
    "\101\013\ufffd\015\056\024\072\025\063\026\054\027\105" +
    "\030\055\031\062\032\051\051\057\062\060\063\107\064" +
    "\156\065\066\072\104\073\050\076\111\077\102\001\002" +
    "\000\004\013\310\001\002\000\004\020\uffef\001\002\000" +
    "\034\002\ufff4\017\ufff4\021\005\022\006\023\010\033\027" +
    "\035\012\036\021\037\025\040\007\041\024\042\017\064" +
    "\014\001\002\000\006\002\ufff5\017\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\026\002\014\003\021\004\003\013\017\014" +
    "\015\015\022\016\027\021\010\023\025\024\012\001\001" +
    "\000\002\001\001\000\012\021\274\023\025\024\012\025" +
    "\275\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\257\023\025\024\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\031" +
    "\022\033\023\025\024\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\031\022\036\023\025\024\012\001\001\000\002\001" +
    "\001\000\012\021\031\022\040\023\025\024\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\252\004" +
    "\003\013\017\014\015\015\022\016\027\021\010\023\025" +
    "\024\012\001\001\000\002\001\001\000\004\012\045\001" +
    "\001\000\054\007\070\013\060\017\076\020\073\021\010" +
    "\023\025\024\012\026\067\030\063\031\105\032\046\035" +
    "\051\044\074\045\102\046\064\047\075\050\072\051\066" +
    "\052\077\053\107\054\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\017\120\020\073\026\117\030\063\031\115\032\046\033" +
    "\237\034\116\035\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\017\120\020\073\026\235\030\063\031" +
    "\115\032\046\035\051\001\001\000\020\017\120\020\073" +
    "\026\234\030\063\031\115\032\046\035\051\001\001\000" +
    "\020\017\120\020\073\026\233\030\063\031\115\032\046" +
    "\035\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\127\001\001\000" +
    "\002\001\001\000\020\017\120\020\073\026\210\030\063" +
    "\031\115\032\046\035\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\017\120\020" +
    "\073\026\166\030\063\031\115\032\046\035\051\036\167" +
    "\037\170\040\165\001\001\000\030\017\076\020\073\026" +
    "\162\030\063\031\105\032\046\035\051\047\161\050\072" +
    "\051\066\052\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\017\120\020\073\026\117\030\063" +
    "\031\115\032\046\033\121\034\116\035\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\017\120\020\073\026" +
    "\141\030\063\031\115\032\046\035\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\127\001" +
    "\001\000\020\017\120\020\073\026\143\030\063\031\115" +
    "\032\046\035\051\001\001\000\004\027\127\001\001\000" +
    "\020\017\120\020\073\026\145\030\063\031\115\032\046" +
    "\035\051\001\001\000\004\027\127\001\001\000\002\001" +
    "\001\000\020\017\120\020\073\026\150\030\063\031\115" +
    "\032\046\035\051\001\001\000\004\027\127\001\001\000" +
    "\002\001\001\000\046\006\153\007\154\017\076\020\073" +
    "\026\067\030\063\031\105\032\046\035\051\044\074\045" +
    "\102\046\064\047\075\050\072\051\066\052\077\053\107" +
    "\054\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\006\157\007\154\017\076\020\073" +
    "\026\067\030\063\031\105\032\046\035\051\044\074\045" +
    "\102\046\064\047\075\050\072\051\066\052\077\053\107" +
    "\054\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\017\120" +
    "\020\073\026\166\030\063\031\115\032\046\035\051\040" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\017\120\020\073\026\175\030\063\031\115\032\046\035" +
    "\051\001\001\000\004\027\127\001\001\000\020\017\120" +
    "\020\073\026\177\030\063\031\115\032\046\035\051\001" +
    "\001\000\004\027\127\001\001\000\002\001\001\000\020" +
    "\017\120\020\073\026\203\030\063\031\115\032\046\035" +
    "\051\001\001\000\002\001\001\000\006\011\204\027\127" +
    "\001\001\000\002\001\001\000\020\017\120\020\073\026" +
    "\206\030\063\031\115\032\046\035\051\001\001\000\006" +
    "\011\207\027\127\001\001\000\002\001\001\000\004\027" +
    "\127\001\001\000\046\006\212\007\154\017\076\020\073" +
    "\026\067\030\063\031\105\032\046\035\051\044\074\045" +
    "\102\046\064\047\075\050\072\051\066\052\077\053\107" +
    "\054\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\017\120\020\073\026\216\030\063" +
    "\031\115\032\046\035\051\001\001\000\004\027\127\001" +
    "\001\000\002\001\001\000\046\006\221\007\154\017\076" +
    "\020\073\026\067\030\063\031\105\032\046\035\051\044" +
    "\074\045\102\046\064\047\075\050\072\051\066\052\077" +
    "\053\107\054\111\001\001\000\006\055\222\056\223\001" +
    "\001\000\002\001\001\000\004\057\226\001\001\000\046" +
    "\006\231\007\154\017\076\020\073\026\067\030\063\031" +
    "\105\032\046\035\051\044\074\045\102\046\064\047\075" +
    "\050\072\051\066\052\077\053\107\054\111\001\001\000" +
    "\046\006\230\007\154\017\076\020\073\026\067\030\063" +
    "\031\105\032\046\035\051\044\074\045\102\046\064\047" +
    "\075\050\072\051\066\052\077\053\107\054\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\127\001\001" +
    "\000\004\027\127\001\001\000\004\027\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\017\076\020\073\026" +
    "\162\030\063\031\105\032\046\035\051\047\244\050\072" +
    "\051\066\052\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\006\250\007\154\017\076" +
    "\020\073\026\067\030\063\031\105\032\046\035\051\044" +
    "\074\045\102\046\064\047\075\050\072\051\066\052\077" +
    "\053\107\054\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\256" +
    "\060\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\260\023\025\024\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\021\264\023\025\024\012\041" +
    "\265\042\263\043\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\264\023\025\024\012" +
    "\043\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\021\264\023\025\024\012\041\300\042\263\043\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\303" +
    "\001\001\000\054\007\304\013\060\017\076\020\073\021" +
    "\010\023\025\024\012\026\067\030\063\031\105\032\046" +
    "\035\051\044\074\045\102\046\064\047\075\050\072\051" +
    "\066\052\077\053\107\054\111\001\001\000\002\001\001" +
    "\000\046\006\306\007\154\017\076\020\073\026\067\030" +
    "\063\031\105\032\046\035\051\044\074\045\102\046\064" +
    "\047\075\050\072\051\066\052\077\053\107\054\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\311" +
    "\004\003\013\017\014\015\015\022\016\027\021\010\023" +
    "\025\024\012\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public Boolean syntaxErrors = false;

  public void syntax_error(Symbol current_token){
  report_error("Syntax error at line " + (current_token.left+1) +
  ", column " + current_token.right + "\n", null);
  }
  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declarations main declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= MAIN LBRACE variable_declarations statement SEMICOLON statements RBRACE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statement SEMICOLON statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= io_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= if_start 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= named_ent assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarations ::= declaration SEMICOLON declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration ::= function_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration ::= alias_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= type_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_declaration ::= FDEF ftype IDENTIFIER LPAREN type_id_contents RPAREN LBRACE variable_declarations statement SEMICOLON statements RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variable_declarations ::= variable_declarations variable_declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarations",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variable_declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarations",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variable_declaration ::= type IDENTIFIER initialised 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // initialised ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialised",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // initialised ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialised",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assignment ::= ASSIGNMENT expression multiple_assignments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // multiple_assignments ::= COMMA expression multiple_assignments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignments",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // multiple_assignments ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignments",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_declaration ::= TDEF IDENTIFIER LBRACE type_id_contents RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // alias_declaration ::= ALIAS type type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= collection 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= evaluable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // item ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // item ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // item ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // item ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // item ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= BOOLEAN_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= CHAR_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= dict_t 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= FLOAT_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= INT_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= RATIONAL_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= sequence_t 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ftype ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftype",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ftype ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftype",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_with_top ::= TOP_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_top",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type_with_top ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_top",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // evaluable ::= expression l_r_op expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // evaluable ::= NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // evaluable ::= LEN LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // evaluable ::= MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // evaluable ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // evaluable ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // l_r_op ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // l_r_op ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // l_r_op ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // l_r_op ::= IN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // l_r_op ::= LANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // l_r_op ::= LTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // l_r_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // l_r_op ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // l_r_op ::= NEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // l_r_op ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // l_r_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // l_r_op ::= POW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // l_r_op ::= APPEND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // function_call ::= IDENTIFIER LPAREN sequence_contents RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // collection ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // collection ::= dict_start 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // collection ::= sequence_start 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sequence_t ::= SEQ_T LANGLE type_with_top RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_t",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sequence_start ::= LBRACKET sequence_contents RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_start",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sequence_contents ::= sequence_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_contents",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sequence_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_contents",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sequence_body ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_body",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sequence_body ::= sequence_body COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_body",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dict_t ::= DICT_T LANGLE type_with_top COMMA type_with_top RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_t",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // dict_start ::= LBRACE dict_contents RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_start",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // dict_contents ::= dict_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_contents",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dict_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_contents",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // dot_access ::= expression DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dot_access",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // dict_body ::= dict_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // dict_body ::= dict_body COMMA dict_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dict_value ::= expression COLON expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_value",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type_id_contents ::= type_id_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_contents",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // type_id_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_contents",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // type_id_body ::= type_id_body COMMA type_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_body",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // type_id_body ::= type_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_body",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // type_id ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // while ::= WHILE LPAREN expression RPAREN DO statements OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // for ::= FORALL LPAREN IDENTIFIER IN possible_collections RPAREN DO statements DO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // if_start ::= IF LPAREN expression RPAREN THEN statements if_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_start",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // if_end ::= elif else FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_end",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // elif ::= elif ELIF statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // elif ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // else ::= ELSE statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // else ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // named_ent ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("named_ent",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // named_ent ::= dot_access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("named_ent",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // named_ent ::= collection_access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("named_ent",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // possible_collections ::= named_ent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("possible_collections",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // possible_collections ::= collection 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("possible_collections",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // possible_collections ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("possible_collections",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // collection_access ::= possible_collections LBRACKET expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection_access",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // return ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // return ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // io_op ::= PRINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io_op",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // io_op ::= READ named_ent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io_op",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
