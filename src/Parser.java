
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\005\000\002\005" +
    "\007\000\002\006\004\000\002\006\002\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\006\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\003\005\000\002\003\002\000\002\057\003\000\002\057" +
    "\004\000\002\060\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\012\013\000" +
    "\002\011\006\000\002\011\004\000\002\010\005\000\002" +
    "\010\003\000\002\013\007\000\002\014\005\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\055\007\000\002\055\006\000\002\055\006\000" +
    "\002\055\005\000\002\053\004\000\002\053\005\000\002" +
    "\045\003\000\002\045\002\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\044\004\000\002\054\005" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\026\004\000\002\026" +
    "\006\000\002\026\004\000\002\026\005\000\002\026\004" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\024\003\000\002\024\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\027\006\000\002\022\006\000\002\022\006\000\002" +
    "\030\005\000\002\031\003\000\002\031\002\000\002\032" +
    "\003\000\002\032\005\000\002\021\010\000\002\033\005" +
    "\000\002\034\003\000\002\034\002\000\002\035\005\000" +
    "\002\035\007\000\002\036\003\000\002\036\002\000\002" +
    "\037\005\000\002\037\003\000\002\040\004\000\002\040" +
    "\004\000\002\041\011\000\002\042\013\000\002\042\013" +
    "\000\002\050\013\000\002\051\011\000\002\051\002\000" +
    "\002\052\004\000\002\052\002\000\002\047\004\000\002" +
    "\047\003\000\002\043\004\000\002\043\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\032\017\ufff4\021\005\022\007\023\010\033" +
    "\030\035\012\036\021\037\025\040\006\041\024\042\017" +
    "\064\014\001\002\000\004\020\366\001\002\000\024\033" +
    "\030\035\012\036\021\037\025\040\006\041\024\042\017" +
    "\043\353\064\355\001\002\000\010\006\uffb6\011\uffb6\064" +
    "\uffb6\001\002\000\004\064\337\001\002\000\020\033\030" +
    "\035\012\036\021\037\025\040\006\041\024\042\017\001" +
    "\002\000\004\064\uffaf\001\002\000\010\006\uffb9\011\uffb9" +
    "\064\uffb9\001\002\000\010\006\uffb3\011\uffb3\064\uffb3\001" +
    "\002\000\004\064\uffae\001\002\000\004\002\334\001\002" +
    "\000\004\020\ufff0\001\002\000\010\006\uffb4\011\uffb4\064" +
    "\uffb4\001\002\000\004\020\uffef\001\002\000\010\006\uffb8" +
    "\011\uffb8\064\uffb8\001\002\000\004\017\222\001\002\000" +
    "\004\020\uffed\001\002\000\010\006\uffb5\011\uffb5\064\uffb5" +
    "\001\002\000\004\005\213\001\002\000\004\064\041\001" +
    "\002\000\010\006\uffb7\011\uffb7\064\uffb7\001\002\000\004" +
    "\005\032\001\002\000\004\020\uffee\001\002\000\024\033" +
    "\030\034\035\035\012\036\021\037\025\040\006\041\024" +
    "\042\017\064\036\001\002\000\004\006\040\001\002\000" +
    "\006\006\uffac\011\uffac\001\002\000\006\006\uffad\011\uffad" +
    "\001\002\000\004\006\037\001\002\000\010\006\uffa8\011" +
    "\uffa8\064\uffa8\001\002\000\010\006\uffa9\011\uffa9\064\uffa9" +
    "\001\002\000\006\020\uffea\056\042\001\002\000\034\007" +
    "\051\012\053\015\052\025\063\026\045\027\055\030\064" +
    "\031\070\032\054\051\062\062\046\063\065\064\047\001" +
    "\002\000\050\005\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3" +
    "\016\uffe3\020\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\057\uffe3" +
    "\061\uffe3\001\002\000\006\011\211\020\uffeb\001\002\000" +
    "\050\005\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\016\uffd4" +
    "\020\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\057\uffd4\061\uffd4" +
    "\001\002\000\034\007\051\012\053\015\052\025\063\026" +
    "\045\027\055\030\064\031\070\032\054\051\062\062\046" +
    "\063\065\064\047\001\002\000\060\005\uffda\007\140\010" +
    "\uffda\011\uffda\013\uffda\014\uffda\015\204\016\uffda\020\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052" +
    "\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\141" +
    "\061\uffda\001\002\000\054\005\uffda\007\140\010\uffda\011" +
    "\uffda\013\uffda\014\uffda\016\uffda\020\uffda\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\057\uffda\060\141\061\uffda\001\002\000\040" +
    "\007\051\010\uffa5\012\053\014\143\015\052\025\063\026" +
    "\045\027\055\030\064\031\070\032\054\051\062\062\046" +
    "\063\065\064\047\001\002\000\034\007\051\012\053\015" +
    "\052\025\063\026\045\027\055\030\064\031\070\032\054" +
    "\051\062\062\046\063\065\064\047\001\002\000\036\007" +
    "\051\012\053\013\uff9f\015\052\025\063\026\045\027\055" +
    "\030\064\031\070\032\054\051\062\062\046\063\065\064" +
    "\047\001\002\000\052\005\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\013\uffcf\014\uffcf\016\uffcf\020\uffcf\044\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\057\uffcf\061\uffcf\001\002\000\050\005\uffd3\010" +
    "\uffd3\011\uffd3\013\uffd3\014\uffd3\016\uffd3\020\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053" +
    "\uffd3\054\uffd3\055\uffd3\057\uffd3\061\uffd3\001\002\000\040" +
    "\005\101\011\uffe8\020\uffe8\044\074\045\105\046\104\047" +
    "\077\050\110\051\075\052\100\053\102\054\111\055\103" +
    "\057\076\061\107\001\002\000\052\005\uffe2\007\131\010" +
    "\uffe2\011\uffe2\013\uffe2\014\uffe2\016\uffe2\020\uffe2\044\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\057\uffe2\061\uffe2\001\002\000\052" +
    "\005\uffce\007\uffce\010\uffce\011\uffce\013\uffce\014\uffce\016" +
    "\uffce\020\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\057\uffce\061" +
    "\uffce\001\002\000\050\005\uffe4\010\uffe4\011\uffe4\013\uffe4" +
    "\014\uffe4\016\uffe4\020\uffe4\044\uffe4\045\uffe4\046\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4" +
    "\057\uffe4\061\uffe4\001\002\000\034\007\051\012\053\015" +
    "\052\025\063\026\045\027\055\030\064\031\070\032\054" +
    "\051\062\062\046\063\065\064\047\001\002\000\050\005" +
    "\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0\016\uffd0\020\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\057\uffd0\061\uffd0\001\002" +
    "\000\050\005\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\016" +
    "\uffd2\020\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\057\uffd2\061" +
    "\uffd2\001\002\000\004\015\072\001\002\000\050\005\uffba" +
    "\010\uffba\011\uffba\013\uffba\014\uffba\016\uffba\020\uffba\044" +
    "\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\057\uffba\061\uffba\001\002\000" +
    "\052\005\uffcd\007\uffcd\010\uffcd\011\uffcd\013\uffcd\014\uffcd" +
    "\016\uffcd\020\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\057\uffcd" +
    "\061\uffcd\001\002\000\050\005\uffd1\010\uffd1\011\uffd1\013" +
    "\uffd1\014\uffd1\016\uffd1\020\uffd1\044\uffd1\045\uffd1\046\uffd1" +
    "\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055" +
    "\uffd1\057\uffd1\061\uffd1\001\002\000\050\005\uffe5\010\uffe5" +
    "\011\uffe5\013\uffe5\014\uffe5\016\uffe5\020\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\057\uffe5\061\uffe5\001\002\000\034\007" +
    "\051\012\053\015\052\025\063\026\045\027\055\030\064" +
    "\031\070\032\054\051\062\062\046\063\065\064\047\001" +
    "\002\000\036\005\101\016\106\044\074\045\105\046\104" +
    "\047\077\050\110\051\075\052\100\053\102\054\111\055" +
    "\103\057\076\061\107\001\002\000\034\007\051\012\053" +
    "\015\052\025\063\026\045\027\055\030\064\031\070\032" +
    "\054\051\062\062\046\063\065\064\047\001\002\000\034" +
    "\007\051\012\053\015\052\025\063\026\045\027\055\030" +
    "\064\031\070\032\054\051\062\062\046\063\065\064\047" +
    "\001\002\000\034\007\051\012\053\015\052\025\063\026" +
    "\045\027\055\030\064\031\070\032\054\051\062\062\046" +
    "\063\065\064\047\001\002\000\034\007\051\012\053\015" +
    "\052\025\063\026\045\027\055\030\064\031\070\032\054" +
    "\051\062\062\046\063\065\064\047\001\002\000\034\007" +
    "\051\012\053\015\052\025\063\026\045\027\055\030\064" +
    "\031\070\032\054\051\062\062\046\063\065\064\047\001" +
    "\002\000\034\007\051\012\053\015\052\025\063\026\045" +
    "\027\055\030\064\031\070\032\054\051\062\062\046\063" +
    "\065\064\047\001\002\000\034\007\051\012\053\015\052" +
    "\025\063\026\045\027\055\030\064\031\070\032\054\051" +
    "\062\062\046\063\065\064\047\001\002\000\034\007\051" +
    "\012\053\015\052\025\063\026\045\027\055\030\064\031" +
    "\070\032\054\051\062\062\046\063\065\064\047\001\002" +
    "\000\034\007\051\012\053\015\052\025\063\026\045\027" +
    "\055\030\064\031\070\032\054\051\062\062\046\063\065" +
    "\064\047\001\002\000\034\007\051\012\053\015\052\025" +
    "\063\026\045\027\055\030\064\031\070\032\054\051\062" +
    "\062\046\063\065\064\047\001\002\000\050\005\uffcb\010" +
    "\uffcb\011\uffcb\013\uffcb\014\uffcb\016\uffcb\020\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\057\uffcb\061\uffcb\001\002\000\034" +
    "\007\051\012\053\015\052\025\063\026\045\027\055\030" +
    "\064\031\070\032\054\051\062\062\046\063\065\064\047" +
    "\001\002\000\034\007\051\012\053\015\052\025\063\026" +
    "\045\027\055\030\064\031\070\032\054\051\062\062\046" +
    "\063\065\064\047\001\002\000\034\007\051\012\053\015" +
    "\052\025\063\026\045\027\055\030\064\031\070\032\054" +
    "\051\062\062\046\063\065\064\047\001\002\000\050\005" +
    "\101\010\uffbe\011\uffbe\013\uffbe\014\uffbe\016\uffbe\020\uffbe" +
    "\044\074\045\105\046\104\047\077\050\110\051\uffbe\052" +
    "\100\053\102\054\uffbe\055\uffbe\057\076\061\uffbe\001\002" +
    "\000\040\010\uffc2\011\uffc2\013\uffc2\014\uffc2\016\uffc2\020" +
    "\uffc2\044\uffc2\045\uffc2\047\uffc2\051\uffc2\052\uffc2\054\uffc2" +
    "\055\uffc2\057\uffc2\061\uffc2\001\002\000\050\005\101\010" +
    "\uffbb\011\uffbb\013\uffbb\014\uffbb\016\uffbb\020\uffbb\044\074" +
    "\045\105\046\104\047\077\050\110\051\uffbb\052\100\053" +
    "\102\054\uffbb\055\uffbb\057\076\061\uffbb\001\002\000\050" +
    "\005\101\010\uffc6\011\uffc6\013\uffc6\014\uffc6\016\uffc6\020" +
    "\uffc6\044\uffc6\045\uffc6\046\104\047\077\050\110\051\uffc6" +
    "\052\uffc6\053\102\054\uffc6\055\uffc6\057\076\061\uffc6\001" +
    "\002\000\040\010\uffc5\011\uffc5\013\uffc5\014\uffc5\016\uffc5" +
    "\020\uffc5\044\uffc5\045\uffc5\047\uffc5\051\uffc5\052\uffc5\054" +
    "\uffc5\055\uffc5\057\uffc5\061\uffc5\001\002\000\050\005\101" +
    "\010\uffbd\011\uffbd\013\uffbd\014\uffbd\016\uffbd\020\uffbd\044" +
    "\074\045\105\046\104\047\077\050\110\051\uffbd\052\100" +
    "\053\102\054\uffbd\055\uffbd\057\076\061\uffbd\001\002\000" +
    "\040\010\uffbf\011\uffbf\013\uffbf\014\uffbf\016\uffbf\020\uffbf" +
    "\044\uffbf\045\uffbf\047\uffbf\051\uffbf\052\uffbf\054\uffbf\055" +
    "\uffbf\057\uffbf\061\uffbf\001\002\000\040\010\uffc3\011\uffc3" +
    "\013\uffc3\014\uffc3\016\uffc3\020\uffc3\044\uffc3\045\uffc3\047" +
    "\uffc3\051\uffc3\052\uffc3\054\uffc3\055\uffc3\057\uffc3\061\uffc3" +
    "\001\002\000\050\005\101\010\uffc0\011\uffc0\013\uffc0\014" +
    "\uffc0\016\uffc0\020\uffc0\044\uffc0\045\uffc0\046\104\047\077" +
    "\050\110\051\uffc0\052\uffc0\053\102\054\uffc0\055\uffc0\057" +
    "\076\061\uffc0\001\002\000\050\005\101\010\uffc4\011\uffc4" +
    "\013\uffc4\014\uffc4\016\uffc4\020\uffc4\044\uffc4\045\uffc4\046" +
    "\104\047\077\050\110\051\uffc4\052\uffc4\053\102\054\uffc4" +
    "\055\uffc4\057\076\061\uffc4\001\002\000\050\005\101\010" +
    "\uffbc\011\uffbc\013\uffbc\014\uffbc\016\uffbc\020\uffbc\044\uffbc" +
    "\045\uffbc\046\104\047\077\050\110\051\uffbc\052\uffbc\053" +
    "\102\054\uffbc\055\uffbc\057\076\061\uffbc\001\002\000\050" +
    "\005\101\010\uffc1\011\uffc1\013\uffc1\014\uffc1\016\uffc1\020" +
    "\uffc1\044\074\045\105\046\104\047\077\050\110\051\uffc1" +
    "\052\100\053\102\054\uffc1\055\uffc1\057\076\061\uffc1\001" +
    "\002\000\050\005\101\010\uffc7\011\uffc7\013\uffc7\014\uffc7" +
    "\016\uffc7\020\uffc7\044\uffc7\045\uffc7\046\104\047\077\050" +
    "\110\051\uffc7\052\uffc7\053\102\054\uffc7\055\uffc7\057\076" +
    "\061\uffc7\001\002\000\050\005\101\010\uffca\011\uffca\013" +
    "\uffca\014\uffca\016\uffca\020\uffca\044\074\045\105\046\104" +
    "\047\077\050\110\051\uffca\052\100\053\102\054\uffca\055" +
    "\uffca\057\076\061\uffca\001\002\000\006\007\140\060\141" +
    "\001\002\000\034\007\051\012\053\015\052\025\063\026" +
    "\045\027\055\030\064\031\070\032\054\051\062\062\046" +
    "\063\065\064\047\001\002\000\036\005\101\010\133\044" +
    "\074\045\105\046\104\047\077\050\110\051\075\052\100" +
    "\053\102\054\111\055\103\057\076\061\107\001\002\000" +
    "\056\005\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5" +
    "\016\uffd5\020\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\001\002\000\056\005\uffda\007" +
    "\140\010\uffda\011\uffda\013\uffda\014\uffda\016\uffda\020\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052" +
    "\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\141" +
    "\061\uffda\001\002\000\056\005\uffda\007\140\010\uffda\011" +
    "\uffda\013\uffda\014\uffda\016\uffda\020\uffda\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\060\141\061\uffda\001\002" +
    "\000\052\005\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc\016" +
    "\uffdc\020\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\061\uffdc\001\002\000\056\005\uffda\007\140\010\uffda" +
    "\011\uffda\013\uffda\014\uffda\016\uffda\020\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda" +
    "\054\uffda\055\uffda\056\uffda\057\uffda\060\141\061\uffda\001" +
    "\002\000\036\007\051\012\053\014\143\015\052\025\063" +
    "\026\045\027\055\030\064\031\070\032\054\051\062\062" +
    "\046\063\065\064\047\001\002\000\004\064\142\001\002" +
    "\000\056\005\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\014" +
    "\uffd6\016\uffd6\020\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\001\002\000\036\007\051" +
    "\010\151\012\053\015\052\025\063\026\045\027\055\030" +
    "\064\031\070\032\054\051\062\062\046\063\065\064\047" +
    "\001\002\000\040\005\101\010\133\014\145\044\074\045" +
    "\105\046\104\047\077\050\110\051\075\052\100\053\102" +
    "\054\111\055\103\057\076\061\107\001\002\000\036\007" +
    "\051\010\146\012\053\015\052\025\063\026\045\027\055" +
    "\030\064\031\070\032\054\051\062\062\046\063\065\064" +
    "\047\001\002\000\056\005\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\013\uffdf\014\uffdf\016\uffdf\020\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\001\002\000" +
    "\036\005\101\010\150\044\074\045\105\046\104\047\077" +
    "\050\110\051\075\052\100\053\102\054\111\055\103\057" +
    "\076\061\107\001\002\000\056\005\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\013\uffe1\014\uffe1\016\uffe1\020\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\001" +
    "\002\000\056\005\uffde\007\uffde\010\uffde\011\uffde\013\uffde" +
    "\014\uffde\016\uffde\020\uffde\044\uffde\045\uffde\046\uffde\047" +
    "\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\001\002\000\036\005" +
    "\101\010\153\044\074\045\105\046\104\047\077\050\110" +
    "\051\075\052\100\053\102\054\111\055\103\057\076\061" +
    "\107\001\002\000\056\005\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\013\uffe0\014\uffe0\016\uffe0\020\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\001\002\000" +
    "\052\005\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7\016\uffd7" +
    "\020\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7" +
    "\061\uffd7\001\002\000\052\005\uffdb\010\uffdb\011\uffdb\013" +
    "\uffdb\014\uffdb\016\uffdb\020\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\057\uffdb\061\uffdb\001\002\000\052\005\uffd8" +
    "\010\uffd8\011\uffd8\013\uffd8\014\uffd8\016\uffd8\020\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\061\uffd8\001" +
    "\002\000\052\005\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9" +
    "\016\uffd9\020\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\061\uffd9\001\002\000\036\005\101\014\170\044" +
    "\074\045\105\046\104\047\077\050\110\051\075\052\100" +
    "\053\102\054\111\055\103\057\076\061\107\001\002\000" +
    "\004\013\167\001\002\000\006\011\163\013\uffa0\001\002" +
    "\000\034\007\051\012\053\015\052\025\063\026\045\027" +
    "\055\030\064\031\070\032\054\051\062\062\046\063\065" +
    "\064\047\001\002\000\036\005\101\014\165\044\074\045" +
    "\105\046\104\047\077\050\110\051\075\052\100\053\102" +
    "\054\111\055\103\057\076\061\107\001\002\000\034\007" +
    "\051\012\053\015\052\025\063\026\045\027\055\030\064" +
    "\031\070\032\054\051\062\062\046\063\065\064\047\001" +
    "\002\000\040\005\101\011\uff9d\013\uff9d\044\074\045\105" +
    "\046\104\047\077\050\110\051\075\052\100\053\102\054" +
    "\111\055\103\057\076\061\107\001\002\000\052\005\uffa1" +
    "\007\uffa1\010\uffa1\011\uffa1\013\uffa1\014\uffa1\016\uffa1\020" +
    "\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\054\uffa1\055\uffa1\057\uffa1\061\uffa1\001" +
    "\002\000\034\007\051\012\053\015\052\025\063\026\045" +
    "\027\055\030\064\031\070\032\054\051\062\062\046\063" +
    "\065\064\047\001\002\000\040\005\101\011\uff9e\013\uff9e" +
    "\044\074\045\105\046\104\047\077\050\110\051\075\052" +
    "\100\053\102\054\111\055\103\057\076\061\107\001\002" +
    "\000\036\005\101\016\173\044\074\045\105\046\104\047" +
    "\077\050\110\051\075\052\100\053\102\054\111\055\103" +
    "\057\076\061\107\001\002\000\050\005\uffc9\010\uffc9\011" +
    "\uffc9\013\uffc9\014\uffc9\016\uffc9\020\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\057\uffc9\061\uffc9\001\002\000\010\010\uffa6" +
    "\011\200\016\uffa6\001\002\000\042\005\101\010\uffa4\011" +
    "\uffa4\014\145\044\074\045\105\046\104\047\077\050\110" +
    "\051\075\052\100\053\102\054\111\055\103\057\076\061" +
    "\107\001\002\000\004\010\177\001\002\000\052\005\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\013\uffa7\014\uffa7\016\uffa7\020" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\054\uffa7\055\uffa7\057\uffa7\061\uffa7\001" +
    "\002\000\034\007\051\012\053\015\052\025\063\026\045" +
    "\027\055\030\064\031\070\032\054\051\062\062\046\063" +
    "\065\064\047\001\002\000\042\005\101\010\uffa3\011\uffa3" +
    "\016\uffa3\044\074\045\105\046\104\047\077\050\110\051" +
    "\075\052\100\053\102\054\111\055\103\057\076\061\107" +
    "\001\002\000\050\005\uffc8\010\uffc8\011\uffc8\013\uffc8\014" +
    "\uffc8\016\uffc8\020\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\057" +
    "\uffc8\061\uffc8\001\002\000\052\005\uffdd\010\uffdd\011\uffdd" +
    "\013\uffdd\014\uffdd\016\uffdd\020\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\061\uffdd\001\002\000\036\007" +
    "\051\012\053\015\052\016\uffa5\025\063\026\045\027\055" +
    "\030\064\031\070\032\054\051\062\062\046\063\065\064" +
    "\047\001\002\000\042\005\101\010\uffa4\011\uffa4\016\uffa4" +
    "\044\074\045\105\046\104\047\077\050\110\051\075\052" +
    "\100\053\102\054\111\055\103\057\076\061\107\001\002" +
    "\000\004\016\207\001\002\000\054\005\uffaa\007\uffaa\010" +
    "\uffaa\011\uffaa\013\uffaa\014\uffaa\016\uffaa\020\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\057\uffaa\060\uffaa\061\uffaa\001\002" +
    "\000\040\010\uffcc\011\uffcc\013\uffcc\014\uffcc\016\uffcc\020" +
    "\uffcc\044\uffcc\045\uffcc\047\uffcc\051\uffcc\052\uffcc\054\uffcc" +
    "\055\uffcc\057\uffcc\061\uffcc\001\002\000\034\007\051\012" +
    "\053\015\052\025\063\026\045\027\055\030\064\031\070" +
    "\032\054\051\062\062\046\063\065\064\047\001\002\000" +
    "\040\005\101\011\uffe9\020\uffe9\044\074\045\105\046\104" +
    "\047\077\050\110\051\075\052\100\053\102\054\111\055" +
    "\103\057\076\061\107\001\002\000\024\033\030\034\035" +
    "\035\012\036\021\037\025\040\006\041\024\042\017\064" +
    "\215\001\002\000\004\011\216\001\002\000\006\006\uffab" +
    "\011\uffab\001\002\000\024\033\030\034\035\035\012\036" +
    "\021\037\025\040\006\041\024\042\017\064\215\001\002" +
    "\000\004\006\220\001\002\000\010\006\uffa2\011\uffa2\064" +
    "\uffa2\001\002\000\032\002\ufff4\021\005\022\007\023\010" +
    "\033\030\035\012\036\021\037\025\040\006\041\024\042" +
    "\017\064\014\001\002\000\004\012\223\001\002\000\066" +
    "\007\051\012\053\015\052\024\233\025\063\026\045\027" +
    "\055\030\064\031\070\032\054\033\030\035\012\036\021" +
    "\037\025\040\006\041\024\042\017\051\062\062\046\063" +
    "\065\064\245\065\227\072\241\073\224\076\244\077\237" +
    "\001\002\000\004\015\316\001\002\000\004\020\314\001" +
    "\002\000\004\020\313\001\002\000\004\015\273\001\002" +
    "\000\004\013\271\001\002\000\036\005\101\020\270\044" +
    "\074\045\105\046\104\047\077\050\110\051\075\052\100" +
    "\053\102\054\111\055\103\057\076\061\107\001\002\000" +
    "\052\007\ufffd\012\ufffd\013\ufffd\015\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\051\ufffd\062" +
    "\ufffd\063\ufffd\064\ufffd\065\ufffd\072\ufffd\073\ufffd\076\ufffd" +
    "\077\ufffd\001\002\000\036\007\051\012\053\015\052\020" +
    "\uff8d\025\063\026\045\027\055\030\064\031\070\032\054" +
    "\051\062\062\046\063\065\064\047\001\002\000\040\005" +
    "\uffe3\020\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\263\057" +
    "\uffe3\061\uffe3\001\002\000\062\007\ufff7\012\ufff7\013\ufff7" +
    "\015\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\051\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\067\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\076" +
    "\ufff7\077\ufff7\001\002\000\062\007\ufff8\012\ufff8\013\ufff8" +
    "\015\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\051\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8" +
    "\066\ufff8\067\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\076" +
    "\ufff8\077\ufff8\001\002\000\012\007\262\012\053\032\054" +
    "\064\260\001\002\000\062\007\ufff6\012\ufff6\013\ufff6\015" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\051\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066" +
    "\ufff6\067\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\076\ufff6" +
    "\077\ufff6\001\002\000\004\015\250\001\002\000\004\013" +
    "\ufff3\001\002\000\004\020\247\001\002\000\034\007\051" +
    "\012\053\015\052\025\063\026\045\027\055\030\064\031" +
    "\070\032\054\051\062\062\046\063\065\064\047\001\002" +
    "\000\050\005\uffda\007\140\015\204\020\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda" +
    "\054\uffda\055\uffda\056\uffda\057\uffda\060\141\061\uffda\064" +
    "\uffae\001\002\000\036\005\101\020\uff8c\044\074\045\105" +
    "\046\104\047\077\050\110\051\075\052\100\053\102\054" +
    "\111\055\103\057\076\061\107\001\002\000\062\007\ufffb" +
    "\012\ufffb\013\ufffb\015\ufffb\024\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\031\ufffb\032\ufffb\051\ufffb\062\ufffb\063\ufffb" +
    "\064\ufffb\065\ufffb\066\ufffb\067\ufffb\071\ufffb\072\ufffb\073" +
    "\ufffb\074\ufffb\076\ufffb\077\ufffb\001\002\000\034\007\051" +
    "\012\053\015\052\025\063\026\045\027\055\030\064\031" +
    "\070\032\054\051\062\062\046\063\065\064\047\001\002" +
    "\000\036\005\101\016\252\044\074\045\105\046\104\047" +
    "\077\050\110\051\075\052\100\053\102\054\111\055\103" +
    "\057\076\061\107\001\002\000\004\070\253\001\002\000" +
    "\052\007\ufffd\012\ufffd\015\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\032\ufffd\051\ufffd\062\ufffd\063" +
    "\ufffd\064\ufffd\065\ufffd\071\ufffd\072\ufffd\073\ufffd\076\ufffd" +
    "\077\ufffd\001\002\000\052\007\051\012\053\015\052\024" +
    "\233\025\063\026\045\027\055\030\064\031\070\032\054" +
    "\051\062\062\046\063\065\064\047\065\227\071\256\072" +
    "\241\073\224\076\244\077\237\001\002\000\062\007\ufffe" +
    "\012\ufffe\013\ufffe\015\ufffe\024\ufffe\025\ufffe\026\ufffe\027" +
    "\ufffe\030\ufffe\031\ufffe\032\ufffe\051\ufffe\062\ufffe\063\ufffe" +
    "\064\ufffe\065\ufffe\066\ufffe\067\ufffe\071\ufffe\072\ufffe\073" +
    "\ufffe\074\ufffe\076\ufffe\077\ufffe\001\002\000\062\007\uff96" +
    "\012\uff96\013\uff96\015\uff96\024\uff96\025\uff96\026\uff96\027" +
    "\uff96\030\uff96\031\uff96\032\uff96\051\uff96\062\uff96\063\uff96" +
    "\064\uff96\065\uff96\066\uff96\067\uff96\071\uff96\072\uff96\073" +
    "\uff96\074\uff96\076\uff96\077\uff96\001\002\000\004\020\uff8b" +
    "\001\002\000\010\007\140\020\uffda\060\141\001\002\000" +
    "\004\007\131\001\002\000\036\007\051\010\uffa5\012\053" +
    "\015\052\025\063\026\045\027\055\030\064\031\070\032" +
    "\054\051\062\062\046\063\065\064\047\001\002\000\034" +
    "\007\051\012\053\015\052\025\063\026\045\027\055\030" +
    "\064\031\070\032\054\051\062\062\046\063\065\064\047" +
    "\001\002\000\006\011\211\020\265\001\002\000\062\007" +
    "\ufff9\012\ufff9\013\ufff9\015\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\032\ufff9\051\ufff9\062\ufff9\063" +
    "\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\071\ufff9\072\ufff9" +
    "\073\ufff9\074\ufff9\076\ufff9\077\ufff9\001\002\000\036\005" +
    "\101\020\uff8e\044\074\045\105\046\104\047\077\050\110" +
    "\051\075\052\100\053\102\054\111\055\103\057\076\061" +
    "\107\001\002\000\052\007\051\012\053\013\ufff2\015\052" +
    "\024\233\025\063\026\045\027\055\030\064\031\070\032" +
    "\054\051\062\062\046\063\065\064\047\065\227\072\241" +
    "\073\224\076\244\077\237\001\002\000\062\007\ufffa\012" +
    "\ufffa\013\ufffa\015\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\051\ufffa\062\ufffa\063\ufffa\064" +
    "\ufffa\065\ufffa\066\ufffa\067\ufffa\071\ufffa\072\ufffa\073\ufffa" +
    "\074\ufffa\076\ufffa\077\ufffa\001\002\000\004\020\272\001" +
    "\002\000\032\002\uffff\021\uffff\022\uffff\023\uffff\033\uffff" +
    "\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff\064" +
    "\uffff\001\002\000\034\007\051\012\053\015\052\025\063" +
    "\026\045\027\055\030\064\031\070\032\054\051\062\062" +
    "\046\063\065\064\047\001\002\000\036\005\101\016\275" +
    "\044\074\045\105\046\104\047\077\050\110\051\075\052" +
    "\100\053\102\054\111\055\103\057\076\061\107\001\002" +
    "\000\004\075\276\001\002\000\056\007\ufffd\012\ufffd\015" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\051\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066" +
    "\ufffd\067\ufffd\072\ufffd\073\ufffd\074\ufffd\076\ufffd\077\ufffd" +
    "\001\002\000\056\007\051\012\053\015\052\024\233\025" +
    "\063\026\045\027\055\030\064\031\070\032\054\051\062" +
    "\062\046\063\065\064\047\065\227\066\uff91\067\uff91\072" +
    "\241\073\224\074\uff91\076\244\077\237\001\002\000\010" +
    "\066\uff8f\067\302\074\301\001\002\000\052\007\ufffd\012" +
    "\ufffd\015\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd" +
    "\031\ufffd\032\ufffd\051\ufffd\062\ufffd\063\ufffd\064\ufffd\065" +
    "\ufffd\066\ufffd\072\ufffd\073\ufffd\076\ufffd\077\ufffd\001\002" +
    "\000\004\015\305\001\002\000\004\066\304\001\002\000" +
    "\062\007\uff93\012\uff93\013\uff93\015\uff93\024\uff93\025\uff93" +
    "\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\051\uff93\062" +
    "\uff93\063\uff93\064\uff93\065\uff93\066\uff93\067\uff93\071\uff93" +
    "\072\uff93\073\uff93\074\uff93\076\uff93\077\uff93\001\002\000" +
    "\034\007\051\012\053\015\052\025\063\026\045\027\055" +
    "\030\064\031\070\032\054\051\062\062\046\063\065\064" +
    "\047\001\002\000\036\005\101\016\307\044\074\045\105" +
    "\046\104\047\077\050\110\051\075\052\100\053\102\054" +
    "\111\055\103\057\076\061\107\001\002\000\004\075\310" +
    "\001\002\000\056\007\ufffd\012\ufffd\015\ufffd\024\ufffd\025" +
    "\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\051\ufffd" +
    "\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\072" +
    "\ufffd\073\ufffd\074\ufffd\076\ufffd\077\ufffd\001\002\000\056" +
    "\007\051\012\053\015\052\024\233\025\063\026\045\027" +
    "\055\030\064\031\070\032\054\051\062\062\046\063\065" +
    "\064\047\065\227\066\uff92\067\uff92\072\241\073\224\074" +
    "\uff92\076\244\077\237\001\002\000\052\007\051\012\053" +
    "\015\052\024\233\025\063\026\045\027\055\030\064\031" +
    "\070\032\054\051\062\062\046\063\065\064\047\065\227" +
    "\066\uff90\072\241\073\224\076\244\077\237\001\002\000" +
    "\062\007\ufffc\012\ufffc\013\ufffc\015\ufffc\024\ufffc\025\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\051\ufffc\062" +
    "\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\071\ufffc" +
    "\072\ufffc\073\ufffc\074\ufffc\076\ufffc\077\ufffc\001\002\000" +
    "\066\007\051\012\053\015\052\024\233\025\063\026\045" +
    "\027\055\030\064\031\070\032\054\033\030\035\012\036" +
    "\021\037\025\040\006\041\024\042\017\051\062\062\046" +
    "\063\065\064\245\065\227\072\241\073\224\076\244\077" +
    "\237\001\002\000\004\013\ufff1\001\002\000\004\064\317" +
    "\001\002\000\004\047\320\001\002\000\012\007\262\012" +
    "\053\032\054\064\321\001\002\000\004\016\327\001\002" +
    "\000\004\016\323\001\002\000\004\070\324\001\002\000" +
    "\052\007\ufffd\012\ufffd\015\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\032\ufffd\051\ufffd\062\ufffd\063" +
    "\ufffd\064\ufffd\065\ufffd\071\ufffd\072\ufffd\073\ufffd\076\ufffd" +
    "\077\ufffd\001\002\000\052\007\051\012\053\015\052\024" +
    "\233\025\063\026\045\027\055\030\064\031\070\032\054" +
    "\051\062\062\046\063\065\064\047\065\227\071\326\072" +
    "\241\073\224\076\244\077\237\001\002\000\062\007\uff95" +
    "\012\uff95\013\uff95\015\uff95\024\uff95\025\uff95\026\uff95\027" +
    "\uff95\030\uff95\031\uff95\032\uff95\051\uff95\062\uff95\063\uff95" +
    "\064\uff95\065\uff95\066\uff95\067\uff95\071\uff95\072\uff95\073" +
    "\uff95\074\uff95\076\uff95\077\uff95\001\002\000\004\070\330" +
    "\001\002\000\052\007\ufffd\012\ufffd\015\ufffd\024\ufffd\025" +
    "\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\051\ufffd" +
    "\062\ufffd\063\ufffd\064\ufffd\065\ufffd\071\ufffd\072\ufffd\073" +
    "\ufffd\076\ufffd\077\ufffd\001\002\000\052\007\051\012\053" +
    "\015\052\024\233\025\063\026\045\027\055\030\064\031" +
    "\070\032\054\051\062\062\046\063\065\064\047\065\227" +
    "\071\332\072\241\073\224\076\244\077\237\001\002\000" +
    "\062\007\uff94\012\uff94\013\uff94\015\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\051\uff94\062" +
    "\uff94\063\uff94\064\uff94\065\uff94\066\uff94\067\uff94\071\uff94" +
    "\072\uff94\073\uff94\074\uff94\076\uff94\077\uff94\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002\000\004" +
    "\064\336\001\002\000\004\020\uffe6\001\002\000\004\012" +
    "\340\001\002\000\024\013\uff9b\033\030\035\012\036\021" +
    "\037\025\040\006\041\024\042\017\064\345\001\002\000" +
    "\010\011\351\013\uff9c\016\uff9c\001\002\000\004\013\350" +
    "\001\002\000\004\064\347\001\002\000\010\011\uff99\013" +
    "\uff99\016\uff99\001\002\000\004\064\346\001\002\000\010" +
    "\011\uff97\013\uff97\016\uff97\001\002\000\010\011\uff98\013" +
    "\uff98\016\uff98\001\002\000\004\020\uffe7\001\002\000\022" +
    "\033\030\035\012\036\021\037\025\040\006\041\024\042" +
    "\017\064\345\001\002\000\010\011\uff9a\013\uff9a\016\uff9a" +
    "\001\002\000\004\064\uffb1\001\002\000\004\064\uffb0\001" +
    "\002\000\004\064\uffb2\001\002\000\004\064\357\001\002" +
    "\000\004\015\360\001\002\000\024\016\uff9b\033\030\035" +
    "\012\036\021\037\025\040\006\041\024\042\017\064\345" +
    "\001\002\000\004\016\362\001\002\000\004\012\363\001" +
    "\002\000\066\007\051\012\053\015\052\024\233\025\063" +
    "\026\045\027\055\030\064\031\070\032\054\033\030\035" +
    "\012\036\021\037\025\040\006\041\024\042\017\051\062" +
    "\062\046\063\065\064\245\065\227\072\241\073\224\076" +
    "\244\077\237\001\002\000\004\013\365\001\002\000\004" +
    "\020\uffec\001\002\000\034\002\ufff4\017\ufff4\021\005\022" +
    "\007\023\010\033\030\035\012\036\021\037\025\040\006" +
    "\041\024\042\017\064\014\001\002\000\006\002\ufff5\017" +
    "\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\030\002\014\003\021\004\003\011\017\012" +
    "\015\013\022\014\030\017\010\021\026\022\012\024\025" +
    "\001\001\000\002\001\001\000\012\017\353\021\026\022" +
    "\012\023\355\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\334\021\026\022\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\033\020\032\021\026\022\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\010\043\015\056\016\065\025\055" +
    "\026\070\027\047\030\066\033\057\053\042\055\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\015\056\016\065\025\207\026\070\027\047\030" +
    "\066\033\057\053\042\055\060\001\001\000\014\044\133" +
    "\045\202\046\154\054\134\055\136\001\001\000\014\044" +
    "\133\045\201\046\154\054\134\055\136\001\001\000\030" +
    "\015\056\016\065\025\174\026\070\027\047\030\066\031" +
    "\175\032\173\033\057\053\042\055\060\001\001\000\024" +
    "\015\056\016\065\025\171\026\070\027\047\030\066\033" +
    "\057\053\042\055\060\001\001\000\030\015\056\016\065" +
    "\025\157\026\070\027\047\030\066\033\057\034\160\035" +
    "\161\053\042\055\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\015\056\016\065" +
    "\025\126\026\070\027\047\030\066\033\057\053\042\055" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\015\056\016\065\025\072" +
    "\026\070\027\047\030\066\033\057\053\042\055\060\001" +
    "\001\000\002\001\001\000\024\015\056\016\065\025\125" +
    "\026\070\027\047\030\066\033\057\053\042\055\060\001" +
    "\001\000\024\015\056\016\065\025\124\026\070\027\047" +
    "\030\066\033\057\053\042\055\060\001\001\000\024\015" +
    "\056\016\065\025\123\026\070\027\047\030\066\033\057" +
    "\053\042\055\060\001\001\000\024\015\056\016\065\025" +
    "\122\026\070\027\047\030\066\033\057\053\042\055\060" +
    "\001\001\000\024\015\056\016\065\025\121\026\070\027" +
    "\047\030\066\033\057\053\042\055\060\001\001\000\024" +
    "\015\056\016\065\025\120\026\070\027\047\030\066\033" +
    "\057\053\042\055\060\001\001\000\024\015\056\016\065" +
    "\025\117\026\070\027\047\030\066\033\057\053\042\055" +
    "\060\001\001\000\024\015\056\016\065\025\116\026\070" +
    "\027\047\030\066\033\057\053\042\055\060\001\001\000" +
    "\024\015\056\016\065\025\115\026\070\027\047\030\066" +
    "\033\057\053\042\055\060\001\001\000\024\015\056\016" +
    "\065\025\114\026\070\027\047\030\066\033\057\053\042" +
    "\055\060\001\001\000\002\001\001\000\024\015\056\016" +
    "\065\025\113\026\070\027\047\030\066\033\057\053\042" +
    "\055\060\001\001\000\024\015\056\016\065\025\112\026" +
    "\070\027\047\030\066\033\057\053\042\055\060\001\001" +
    "\000\024\015\056\016\065\025\111\026\070\027\047\030" +
    "\066\033\057\053\042\055\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\044\133\046\135\054\134\055\136\001\001\000" +
    "\024\015\056\016\065\025\131\026\070\027\047\030\066" +
    "\033\057\053\042\055\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\044\133\045\156\046\154\054\134" +
    "\055\136\001\001\000\014\044\133\045\155\046\154\054" +
    "\134\055\136\001\001\000\002\001\001\000\014\044\133" +
    "\045\153\046\154\054\134\055\136\001\001\000\024\015" +
    "\056\016\065\025\143\026\070\027\047\030\066\033\057" +
    "\053\042\055\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\015\056\016\065\025\151\026\070\027\047" +
    "\030\066\033\057\053\042\055\060\001\001\000\002\001" +
    "\001\000\024\015\056\016\065\025\146\026\070\027\047" +
    "\030\066\033\057\053\042\055\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\015" +
    "\056\016\065\025\163\026\070\027\047\030\066\033\057" +
    "\053\042\055\060\001\001\000\002\001\001\000\024\015" +
    "\056\016\065\025\165\026\070\027\047\030\066\033\057" +
    "\053\042\055\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\015\056\016\065\025\170\026\070\027\047" +
    "\030\066\033\057\053\042\055\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\015\056\016\065\025\200\026\070\027\047\030\066" +
    "\033\057\053\042\055\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\015\056\016\065" +
    "\025\204\026\070\027\047\030\066\031\205\032\173\033" +
    "\057\053\042\055\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\015" +
    "\056\016\065\025\211\026\070\027\047\030\066\033\057" +
    "\053\042\055\060\001\001\000\002\001\001\000\012\017" +
    "\033\020\213\021\026\022\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\033\020\216\021\026\022" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\332\004\003\011\017\012\015\013\022\014\030\017" +
    "\010\021\026\022\012\024\025\001\001\000\002\001\001" +
    "\000\056\007\231\011\224\015\056\016\065\017\010\021" +
    "\026\022\012\024\025\025\230\026\070\027\047\030\066" +
    "\033\057\041\234\042\237\043\225\047\242\050\235\053" +
    "\233\055\060\057\227\060\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\266\001\001" +
    "\000\024\015\056\016\065\025\265\026\070\027\047\030" +
    "\066\033\057\053\042\055\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\260\030" +
    "\066\033\057\053\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\015" +
    "\056\016\065\025\245\026\070\027\047\030\066\033\057" +
    "\053\042\055\060\001\001\000\014\044\133\045\202\046" +
    "\154\054\134\055\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\015\056\016\065\025\250\026\070\027" +
    "\047\030\066\033\057\053\042\055\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\253\001\001\000" +
    "\040\007\254\015\056\016\065\025\230\026\070\027\047" +
    "\030\066\033\057\041\234\042\237\043\225\047\242\050" +
    "\235\053\233\055\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\044\133\045\202\046" +
    "\154\054\134\055\136\001\001\000\004\054\127\001\001" +
    "\000\030\015\056\016\065\025\204\026\070\027\047\030" +
    "\066\031\175\032\173\033\057\053\042\055\060\001\001" +
    "\000\026\010\263\015\056\016\065\025\055\026\070\027" +
    "\047\030\066\033\057\053\042\055\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\007" +
    "\254\015\056\016\065\025\230\026\070\027\047\030\066" +
    "\033\057\041\234\042\237\043\225\047\242\050\235\053" +
    "\233\055\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\015\056\016\065\025\273\026" +
    "\070\027\047\030\066\033\057\053\042\055\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\276\001" +
    "\001\000\042\007\254\015\056\016\065\025\230\026\070" +
    "\027\047\030\066\033\057\041\234\042\237\043\225\047" +
    "\242\050\235\051\277\053\233\055\060\001\001\000\004" +
    "\052\302\001\001\000\004\006\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\056" +
    "\016\065\025\305\026\070\027\047\030\066\033\057\053" +
    "\042\055\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\310\001\001\000\040\007\254\015\056\016" +
    "\065\025\230\026\070\027\047\030\066\033\057\041\234" +
    "\042\237\043\225\047\242\050\235\053\233\055\060\001" +
    "\001\000\040\007\254\015\056\016\065\025\230\026\070" +
    "\027\047\030\066\033\057\041\234\042\237\043\225\047" +
    "\242\050\235\053\233\055\060\001\001\000\002\001\001" +
    "\000\056\007\231\011\224\015\056\016\065\017\010\021" +
    "\026\022\012\024\025\025\230\026\070\027\047\030\066" +
    "\033\057\041\234\042\237\043\225\047\242\050\235\053" +
    "\233\055\060\057\314\060\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\321\030" +
    "\066\033\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\324\001\001\000\040\007" +
    "\254\015\056\016\065\025\230\026\070\027\047\030\066" +
    "\033\057\041\234\042\237\043\225\047\242\050\235\053" +
    "\233\055\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\330\001\001\000\040\007\254\015\056\016" +
    "\065\025\230\026\070\027\047\030\066\033\057\041\234" +
    "\042\237\043\225\047\242\050\235\053\233\055\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\342\021\026\022\012\036\341\037\340\040\343" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\342\021" +
    "\026\022\012\040\351\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\342\021\026\022\012" +
    "\036\360\037\340\040\343\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\007\231\011\224\015\056\016\065" +
    "\017\010\021\026\022\012\024\025\025\230\026\070\027" +
    "\047\030\066\033\057\041\234\042\237\043\225\047\242" +
    "\050\235\053\233\055\060\057\363\060\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\366\004\003" +
    "\011\017\012\015\013\022\014\030\017\010\021\026\022" +
    "\012\024\025\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Boolean syntaxErrors = false;

  public void syntax_error(Symbol current_token) {
    report_error("Syntax error at line " + (current_token.left+1) + ", column "
        + current_token.right + "\n", null
    );
    syntaxErrors = true;
  }

  public void unrecovered_syntax_error(Symbol current_token) {
    if(!syntaxErrors) {
      report_error("Syntax error at line " + (current_token.left+1) + ", column "
          + current_token.right, null
      );
      syntaxErrors = true;
    }
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declarations main declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= MAIN LBRACE body RBRACE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= io_op SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= return SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= settable ASSIGNMENT multiple_assignments SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarations ::= declaration SEMICOLON declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // body ::= variable_declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // body ::= statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variable_declarations ::= variable_declaration SEMICOLON body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarations",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= function_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= alias_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration ::= type_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_declaration ::= FDEF ftype IDENTIFIER LPAREN type_id_contents RPAREN LBRACE body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variable_declaration ::= type_with_id IDENTIFIER ASSIGNMENT multiple_assignments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variable_declaration ::= type_with_id IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // multiple_assignments ::= multiple_assignments COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignments",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // multiple_assignments ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignments",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_declaration ::= TDEF IDENTIFIER LBRACE type_id_contents RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // alias_declaration ::= ALIAS type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias_declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= evaluable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= slice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= settable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= collection 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // slice ::= LBRACKET expression COLON expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // slice ::= LBRACKET COLON expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // slice ::= LBRACKET expression COLON RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // slice ::= LBRACKET COLON RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // settable ::= IDENTIFIER access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("settable",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // settable ::= collection index_access access_main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("settable",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // access ::= access_main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // access ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // access_main ::= dot_access access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_main",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // access_main ::= index_access access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_main",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // access_main ::= slice access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_main",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dot_access ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dot_access",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // index_access ::= LBRACKET expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_access",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // item ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // item ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // item ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // item ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // item ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // collection ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // collection ::= dict_start 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // collection ::= sequence_start 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // evaluable ::= NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // evaluable ::= LEN LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // evaluable ::= MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // evaluable ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // evaluable ::= function_call access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // evaluable ::= expression AND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // evaluable ::= expression DIV expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // evaluable ::= expression EQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // evaluable ::= expression IN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // evaluable ::= expression LANGLE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // evaluable ::= expression LTEQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // evaluable ::= expression MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // evaluable ::= expression MULT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // evaluable ::= expression NEQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // evaluable ::= expression OR expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // evaluable ::= expression PLUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // evaluable ::= expression POW expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // evaluable ::= expression APPEND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // evaluable ::= item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type ::= BOOLEAN_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type ::= CHAR_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type ::= dict_t 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // type ::= FLOAT_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // type ::= INT_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // type ::= RATIONAL_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // type ::= sequence_t 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ftype ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftype",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ftype ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftype",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ftype ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftype",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type_with_id ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_id",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type_with_id ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_id",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type_with_top_id ::= TOP_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_top_id",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type_with_top_id ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_top_id",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type_with_top_id ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_top_id",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function_call ::= IDENTIFIER LPAREN sequence_contents RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sequence_t ::= SEQ_T LANGLE type_with_top_id RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_t",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sequence_t ::= SEQ_T LANGLE IDENTIFIER RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_t",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sequence_start ::= LBRACKET sequence_contents RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_start",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sequence_contents ::= sequence_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_contents",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sequence_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_contents",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sequence_body ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_body",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sequence_body ::= sequence_body COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_body",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // dict_t ::= DICT_T LANGLE type_with_top_id COMMA type_with_top_id RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_t",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dict_start ::= LBRACE dict_contents RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_start",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dict_contents ::= dict_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_contents",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // dict_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_contents",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // dict_body ::= expression COLON expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // dict_body ::= dict_body COMMA expression COLON expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // type_id_contents ::= type_id_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_contents",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // type_id_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_contents",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // type_id_body ::= type_id_body COMMA type_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // type_id_body ::= type_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // type_id ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // type_id ::= IDENTIFIER IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // while ::= WHILE LPAREN expression RPAREN DO statements OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // for ::= FORALL LPAREN IDENTIFIER IN collection RPAREN DO statements OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // for ::= FORALL LPAREN IDENTIFIER IN IDENTIFIER RPAREN DO statements OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // if ::= IF LPAREN expression RPAREN THEN statements elif else FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // elif ::= elif ELIF LPAREN expression RPAREN THEN statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // elif ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // else ::= ELSE statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // else ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // return ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // return ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // io_op ::= PRINT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io_op",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // io_op ::= READ settable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io_op",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
