
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\005\000\002\005" +
    "\012\000\002\006\005\000\002\006\002\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\004\000\002" +
    "\003\005\000\002\003\002\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\014\016" +
    "\000\002\012\005\000\002\012\002\000\002\013\005\000" +
    "\002\060\003\000\002\060\002\000\002\010\005\000\002" +
    "\011\005\000\002\011\002\000\002\015\007\000\002\016" +
    "\005\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\030" +
    "\005\000\002\030\004\000\002\030\006\000\002\030\004" +
    "\000\002\030\005\000\002\030\003\000\002\047\003\000" +
    "\002\051\006\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\050\005\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\025\003\000\002\025\003\000\002\022\003\000\002" +
    "\022\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\031\006\000\002\024\006\000\002\032" +
    "\005\000\002\033\003\000\002\033\002\000\002\034\003" +
    "\000\002\034\005\000\002\023\010\000\002\035\005\000" +
    "\002\036\003\000\002\036\002\000\002\037\003\000\002" +
    "\037\005\000\002\040\005\000\002\041\003\000\002\041" +
    "\002\000\002\042\005\000\002\042\003\000\002\043\004" +
    "\000\002\044\011\000\002\045\013\000\002\054\011\000" +
    "\002\055\005\000\002\056\005\000\002\056\002\000\002" +
    "\057\004\000\002\057\002\000\002\053\004\000\002\053" +
    "\003\000\002\046\003\000\002\046\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\032\017\ufff4\021\005\022\006\023\010\033" +
    "\027\035\012\036\021\037\025\040\007\041\024\042\017" +
    "\064\014\001\002\000\004\020\302\001\002\000\024\033" +
    "\027\035\012\036\021\037\025\040\007\041\024\042\017" +
    "\043\265\064\014\001\002\000\004\064\253\001\002\000" +
    "\030\006\uffc8\011\uffc8\020\uffc8\033\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\064\uffc8\001\002\000" +
    "\022\033\027\035\012\036\021\037\025\040\007\041\024" +
    "\042\017\064\014\001\002\000\004\064\246\001\002\000" +
    "\030\006\uffcb\011\uffcb\020\uffcb\033\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\064\uffcb\001\002\000" +
    "\030\006\uffc5\011\uffc5\020\uffc5\033\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\064\uffc5\001\002\000" +
    "\030\006\uffcc\011\uffcc\020\uffcc\033\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\064\uffcc\001\002\000" +
    "\004\002\245\001\002\000\004\020\ufff3\001\002\000\030" +
    "\006\uffc6\011\uffc6\020\uffc6\033\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\064\uffc6\001\002\000\004" +
    "\020\ufff2\001\002\000\030\006\uffca\011\uffca\020\uffca\033" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\064\uffca\001\002\000\004\020\ufff0\001\002\000\004\017" +
    "\044\001\002\000\030\006\uffc7\011\uffc7\020\uffc7\033\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\064" +
    "\uffc7\001\002\000\004\005\036\001\002\000\030\006\uffc9" +
    "\011\uffc9\020\uffc9\033\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\064\uffc9\001\002\000\004\005\031" +
    "\001\002\000\004\020\ufff1\001\002\000\024\033\027\034" +
    "\033\035\012\036\021\037\025\040\007\041\024\042\017" +
    "\064\014\001\002\000\006\006\uffc1\011\uffc1\001\002\000" +
    "\006\006\uffc2\011\uffc2\001\002\000\004\006\035\001\002" +
    "\000\030\006\uffb2\011\uffb2\020\uffb2\033\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\064\uffb2\001\002" +
    "\000\024\033\027\034\033\035\012\036\021\037\025\040" +
    "\007\041\024\042\017\064\014\001\002\000\004\011\040" +
    "\001\002\000\024\033\027\034\033\035\012\036\021\037" +
    "\025\040\007\041\024\042\017\064\014\001\002\000\004" +
    "\006\042\001\002\000\030\006\uffac\011\uffac\020\uffac\033" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\064\uffac\001\002\000\032\002\ufff4\021\005\022\006\023" +
    "\010\033\027\035\012\036\021\037\025\040\007\041\024" +
    "\042\017\064\014\001\002\000\004\012\045\001\002\000" +
    "\066\007\uffed\012\uffed\015\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\051\uffed\062\uffed" +
    "\063\uffed\064\uffed\065\uffed\072\uffed\073\uffed\076\uffed\077" +
    "\uffed\001\002\000\066\007\053\012\076\015\056\024\071" +
    "\025\063\026\054\027\102\030\055\031\062\032\051\033" +
    "\027\035\012\036\021\037\025\040\007\041\024\042\017" +
    "\051\057\062\060\063\104\064\110\065\066\072\101\073" +
    "\050\076\106\077\077\001\002\000\050\005\uffd9\010\uffd9" +
    "\011\uffd9\013\uffd9\014\uffd9\016\uffd9\020\uffd9\044\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\054\uffd9\055\uffd9\057\uffd9\061\uffd9\001\002\000\004\015" +
    "\230\001\002\000\050\005\uffdb\010\uffdb\011\uffdb\013\uffdb" +
    "\014\uffdb\016\uffdb\020\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\057\uffdb\061\uffdb\001\002\000\050\005\uffda\010\uffda\011" +
    "\uffda\013\uffda\014\uffda\016\uffda\020\uffda\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\057\uffda\061\uffda\001\002\000\036\007\053" +
    "\010\uffaf\012\076\015\056\025\063\026\054\027\102\030" +
    "\055\031\062\032\051\051\057\062\060\063\104\064\112" +
    "\001\002\000\050\005\uffe0\010\uffe0\011\uffe0\013\uffe0\014" +
    "\uffe0\016\uffe0\020\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\057" +
    "\uffe0\061\uffe0\001\002\000\050\005\uffde\010\uffde\011\uffde" +
    "\013\uffde\014\uffde\016\uffde\020\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde" +
    "\055\uffde\057\uffde\061\uffde\001\002\000\034\007\053\012" +
    "\076\015\056\025\063\026\054\027\102\030\055\031\062" +
    "\032\051\051\057\062\060\063\104\064\112\001\002\000" +
    "\034\007\053\012\076\015\056\025\063\026\054\027\102" +
    "\030\055\031\062\032\051\051\057\062\060\063\104\064" +
    "\112\001\002\000\034\007\053\012\076\015\056\025\063" +
    "\026\054\027\102\030\055\031\062\032\051\051\057\062" +
    "\060\063\104\064\112\001\002\000\004\020\221\001\002" +
    "\000\050\005\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd\016" +
    "\uffdd\020\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\057\uffdd\061" +
    "\uffdd\001\002\000\050\005\uffdc\010\uffdc\011\uffdc\013\uffdc" +
    "\014\uffdc\016\uffdc\020\uffdc\044\uffdc\045\uffdc\046\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\057\uffdc\061\uffdc\001\002\000\050\005\uffe2\010\uffe2\011" +
    "\uffe2\013\uffe2\014\uffe2\016\uffe2\020\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054" +
    "\uffe2\055\uffe2\057\uffe2\061\uffe2\001\002\000\004\020\ufffc" +
    "\001\002\000\004\015\204\001\002\000\036\005\125\020" +
    "\ufff7\044\120\045\131\046\130\047\122\050\133\051\117" +
    "\052\123\053\126\054\134\055\127\057\121\061\132\001" +
    "\002\000\004\020\200\001\002\000\036\007\053\012\076" +
    "\015\056\020\uff97\025\063\026\054\027\102\030\055\031" +
    "\062\032\051\051\057\062\060\063\104\064\112\001\002" +
    "\000\050\005\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\016" +
    "\uffe4\020\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\057\uffe4\061" +
    "\uffe4\001\002\000\004\020\ufffa\001\002\000\004\056\170" +
    "\001\002\000\050\005\uffe3\010\uffe3\011\uffe3\013\uffe3\014" +
    "\uffe3\016\uffe3\020\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\057" +
    "\uffe3\061\uffe3\001\002\000\036\007\053\012\076\013\uffa9" +
    "\015\056\025\063\026\054\027\102\030\055\031\062\032" +
    "\051\051\057\062\060\063\104\064\112\001\002\000\004" +
    "\064\156\001\002\000\004\020\ufff9\001\002\000\004\015" +
    "\143\001\002\000\050\005\uffdf\010\uffdf\011\uffdf\013\uffdf" +
    "\014\uffdf\016\uffdf\020\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\057\uffdf\061\uffdf\001\002\000\050\005\uffd3\010\uffd3\011" +
    "\uffd3\013\uffd3\014\uffd3\016\uffd3\020\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\057\uffd3\061\uffd3\001\002\000\004\015\140" +
    "\001\002\000\004\020\ufff8\001\002\000\004\020\uff96\001" +
    "\002\000\004\020\ufffb\001\002\000\044\005\uffe1\015\111" +
    "\020\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffd2\057\uffe1" +
    "\061\uffe1\064\uffcc\001\002\000\036\007\053\012\076\015" +
    "\056\016\uffaf\025\063\026\054\027\102\030\055\031\062" +
    "\032\051\051\057\062\060\063\104\064\112\001\002\000" +
    "\052\005\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\015\111" +
    "\016\uffe1\020\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\057\uffe1" +
    "\061\uffe1\001\002\000\010\010\uffb0\011\136\016\uffb0\001" +
    "\002\000\042\005\125\010\uffae\011\uffae\016\uffae\044\120" +
    "\045\131\046\130\047\122\050\133\051\117\052\123\053" +
    "\126\054\134\055\127\057\121\061\132\001\002\000\004" +
    "\016\116\001\002\000\050\005\uffb3\010\uffb3\011\uffb3\013" +
    "\uffb3\014\uffb3\016\uffb3\020\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\057\uffb3\061\uffb3\001\002\000\034\007\uffba\012\uffba" +
    "\015\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\051\uffba\062\uffba\063\uffba\064\uffba\001\002\000\034" +
    "\007\uffc0\012\uffc0\015\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\051\uffc0\062\uffc0\063\uffc0\064\uffc0" +
    "\001\002\000\034\007\uffb5\012\uffb5\015\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\051\uffb5\062\uffb5" +
    "\063\uffb5\064\uffb5\001\002\000\034\007\uffbd\012\uffbd\015" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\051\uffbd\062\uffbd\063\uffbd\064\uffbd\001\002\000\034\007" +
    "\uffb9\012\uffb9\015\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\051\uffb9\062\uffb9\063\uffb9\064\uffb9\001" +
    "\002\000\034\007\053\012\076\015\056\025\063\026\054" +
    "\027\102\030\055\031\062\032\051\051\057\062\060\063" +
    "\104\064\112\001\002\000\034\007\uffbc\012\uffbc\015\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\051" +
    "\uffbc\062\uffbc\063\uffbc\064\uffbc\001\002\000\034\007\uffb8" +
    "\012\uffb8\015\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\051\uffb8\062\uffb8\063\uffb8\064\uffb8\001\002" +
    "\000\034\007\uffb6\012\uffb6\015\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\051\uffb6\062\uffb6\063\uffb6" +
    "\064\uffb6\001\002\000\034\007\uffbe\012\uffbe\015\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\051\uffbe" +
    "\062\uffbe\063\uffbe\064\uffbe\001\002\000\034\007\uffbf\012" +
    "\uffbf\015\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\051\uffbf\062\uffbf\063\uffbf\064\uffbf\001\002\000" +
    "\034\007\uffb4\012\uffb4\015\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\051\uffb4\062\uffb4\063\uffb4\064" +
    "\uffb4\001\002\000\034\007\uffbb\012\uffbb\015\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\051\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\001\002\000\034\007\uffb7\012\uffb7" +
    "\015\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\051\uffb7\062\uffb7\063\uffb7\064\uffb7\001\002\000\050" +
    "\005\125\010\uffd8\011\uffd8\013\uffd8\014\uffd8\016\uffd8\020" +
    "\uffd8\044\120\045\131\046\130\047\122\050\133\051\117" +
    "\052\123\053\126\054\134\055\127\057\121\061\132\001" +
    "\002\000\034\007\053\012\076\015\056\025\063\026\054" +
    "\027\102\030\055\031\062\032\051\051\057\062\060\063" +
    "\104\064\112\001\002\000\042\005\125\010\uffad\011\uffad" +
    "\016\uffad\044\120\045\131\046\130\047\122\050\133\051" +
    "\117\052\123\053\126\054\134\055\127\057\121\061\132" +
    "\001\002\000\034\007\053\012\076\015\056\025\063\026" +
    "\054\027\102\030\055\031\062\032\051\051\057\062\060" +
    "\063\104\064\112\001\002\000\036\005\125\016\142\044" +
    "\120\045\131\046\130\047\122\050\133\051\117\052\123" +
    "\053\126\054\134\055\127\057\121\061\132\001\002\000" +
    "\050\005\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6\016\uffd6" +
    "\020\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\057\uffd6\061\uffd6" +
    "\001\002\000\034\007\053\012\076\015\056\025\063\026" +
    "\054\027\102\030\055\031\062\032\051\051\057\062\060" +
    "\063\104\064\112\001\002\000\036\005\125\016\145\044" +
    "\120\045\131\046\130\047\122\050\133\051\117\052\123" +
    "\053\126\054\134\055\127\057\121\061\132\001\002\000" +
    "\004\070\146\001\002\000\052\007\053\012\076\015\056" +
    "\024\071\025\063\026\054\027\102\030\055\031\062\032" +
    "\051\051\057\062\060\063\104\064\150\065\066\071\ufffd" +
    "\072\101\073\050\076\106\077\077\001\002\000\004\020" +
    "\153\001\002\000\042\005\uffe1\015\111\020\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\056\uffd2\057\uffe1\061\uffe1\001\002" +
    "\000\004\071\152\001\002\000\004\020\uffa0\001\002\000" +
    "\064\007\053\012\076\013\ufffd\015\056\024\071\025\063" +
    "\026\054\027\102\030\055\031\062\032\051\051\057\062" +
    "\060\063\104\064\150\065\066\066\ufffd\067\ufffd\070\ufffd" +
    "\071\ufffd\072\101\073\050\074\ufffd\076\106\077\077\001" +
    "\002\000\016\013\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe" +
    "\074\ufffe\001\002\000\004\020\uff95\001\002\000\004\020" +
    "\uffd2\001\002\000\006\011\uffa8\013\uffa8\001\002\000\036" +
    "\005\125\014\166\044\120\045\131\046\130\047\122\050" +
    "\133\051\117\052\123\053\126\054\134\055\127\057\121" +
    "\061\132\001\002\000\004\013\165\001\002\000\006\011" +
    "\163\013\uffaa\001\002\000\034\007\053\012\076\015\056" +
    "\025\063\026\054\027\102\030\055\031\062\032\051\051" +
    "\057\062\060\063\104\064\112\001\002\000\006\011\uffa7" +
    "\013\uffa7\001\002\000\050\005\uffab\010\uffab\011\uffab\013" +
    "\uffab\014\uffab\016\uffab\020\uffab\044\uffab\045\uffab\046\uffab" +
    "\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055" +
    "\uffab\057\uffab\061\uffab\001\002\000\034\007\053\012\076" +
    "\015\056\025\063\026\054\027\102\030\055\031\062\032" +
    "\051\051\057\062\060\063\104\064\112\001\002\000\040" +
    "\005\125\011\uffa6\013\uffa6\044\120\045\131\046\130\047" +
    "\122\050\133\051\117\052\123\053\126\054\134\055\127" +
    "\057\121\061\132\001\002\000\034\007\053\012\076\015" +
    "\056\025\063\026\054\027\102\030\055\031\062\032\051" +
    "\051\057\062\060\063\104\064\112\001\002\000\004\020" +
    "\ufff6\001\002\000\040\005\125\011\174\020\uffe7\044\120" +
    "\045\131\046\130\047\122\050\133\051\117\052\123\053" +
    "\126\054\134\055\127\057\121\061\132\001\002\000\004" +
    "\020\uffe9\001\002\000\034\007\053\012\076\015\056\025" +
    "\063\026\054\027\102\030\055\031\062\032\051\051\057" +
    "\062\060\063\104\064\112\001\002\000\040\005\125\011" +
    "\174\020\uffe7\044\120\045\131\046\130\047\122\050\133" +
    "\051\117\052\123\053\126\054\134\055\127\057\121\061" +
    "\132\001\002\000\004\020\uffe8\001\002\000\036\005\125" +
    "\020\uff98\044\120\045\131\046\130\047\122\050\133\051" +
    "\117\052\123\053\126\054\134\055\127\057\121\061\132" +
    "\001\002\000\052\007\053\012\076\013\ufffd\015\056\024" +
    "\071\025\063\026\054\027\102\030\055\031\062\032\051" +
    "\051\057\062\060\063\104\064\150\065\066\072\101\073" +
    "\050\076\106\077\077\001\002\000\004\013\202\001\002" +
    "\000\004\020\203\001\002\000\032\002\uffff\021\uffff\022" +
    "\uffff\023\uffff\033\uffff\035\uffff\036\uffff\037\uffff\040\uffff" +
    "\041\uffff\042\uffff\064\uffff\001\002\000\034\007\053\012" +
    "\076\015\056\025\063\026\054\027\102\030\055\031\062" +
    "\032\051\051\057\062\060\063\104\064\112\001\002\000" +
    "\036\005\125\016\206\044\120\045\131\046\130\047\122" +
    "\050\133\051\117\052\123\053\126\054\134\055\127\057" +
    "\121\061\132\001\002\000\004\075\207\001\002\000\056" +
    "\007\053\012\076\015\056\024\071\025\063\026\054\027" +
    "\102\030\055\031\062\032\051\051\057\062\060\063\104" +
    "\064\150\065\066\066\ufffd\067\ufffd\072\101\073\050\074" +
    "\ufffd\076\106\077\077\001\002\000\010\066\uff9b\067\uff9b" +
    "\074\uff9b\001\002\000\004\020\uff9e\001\002\000\010\066" +
    "\uff99\067\214\074\213\001\002\000\052\007\053\012\076" +
    "\015\056\024\071\025\063\026\054\027\102\030\055\031" +
    "\062\032\051\051\057\062\060\063\104\064\150\065\066" +
    "\066\ufffd\072\101\073\050\076\106\077\077\001\002\000" +
    "\056\007\053\012\076\015\056\024\071\025\063\026\054" +
    "\027\102\030\055\031\062\032\051\051\057\062\060\063" +
    "\104\064\150\065\066\066\ufffd\067\ufffd\072\101\073\050" +
    "\074\ufffd\076\106\077\077\001\002\000\004\066\216\001" +
    "\002\000\004\020\uff9d\001\002\000\010\066\uff9c\067\uff9c" +
    "\074\uff9c\001\002\000\004\066\uff9a\001\002\000\066\007" +
    "\uffee\012\uffee\015\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\031\uffee\032\uffee\033\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\051\uffee\062\uffee\063\uffee" +
    "\064\uffee\065\uffee\072\uffee\073\uffee\076\uffee\077\uffee\001" +
    "\002\000\040\010\uffd7\011\uffd7\013\uffd7\014\uffd7\016\uffd7" +
    "\020\uffd7\044\uffd7\045\uffd7\047\uffd7\051\uffd7\052\uffd7\054" +
    "\uffd7\055\uffd7\057\uffd7\061\uffd7\001\002\000\050\005\125" +
    "\010\uffd5\011\uffd5\013\uffd5\014\uffd5\016\uffd5\020\uffd5\044" +
    "\uffd5\045\uffd5\046\130\047\122\050\133\051\uffd5\052\uffd5" +
    "\053\126\054\uffd5\055\uffd5\057\121\061\uffd5\001\002\000" +
    "\036\005\125\016\225\044\120\045\131\046\130\047\122" +
    "\050\133\051\117\052\123\053\126\054\134\055\127\057" +
    "\121\061\132\001\002\000\050\005\uffd4\010\uffd4\011\uffd4" +
    "\013\uffd4\014\uffd4\016\uffd4\020\uffd4\044\uffd4\045\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\057\uffd4\061\uffd4\001\002\000\004\010\227\001" +
    "\002\000\050\005\uffb1\010\uffb1\011\uffb1\013\uffb1\014\uffb1" +
    "\016\uffb1\020\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\057\uffb1" +
    "\061\uffb1\001\002\000\004\064\231\001\002\000\004\047" +
    "\232\001\002\000\012\007\053\012\076\032\051\064\237" +
    "\001\002\000\004\016\240\001\002\000\004\016\uffd0\001" +
    "\002\000\004\016\uffce\001\002\000\004\016\uffcf\001\002" +
    "\000\006\015\111\016\uffd2\001\002\000\004\070\241\001" +
    "\002\000\052\007\053\012\076\015\056\024\071\025\063" +
    "\026\054\027\102\030\055\031\062\032\051\051\057\062" +
    "\060\063\104\064\150\065\066\070\ufffd\072\101\073\050" +
    "\076\106\077\077\001\002\000\004\070\243\001\002\000" +
    "\004\020\uff9f\001\002\000\004\002\000\001\002\000\004" +
    "\002\001\001\002\000\006\020\uffea\056\170\001\002\000" +
    "\004\020\uffec\001\002\000\004\020\uffeb\001\002\000\022" +
    "\033\027\035\012\036\021\037\025\040\007\041\024\042" +
    "\017\064\014\001\002\000\004\020\uffe5\001\002\000\004" +
    "\012\254\001\002\000\024\013\uffa4\033\027\035\012\036" +
    "\021\037\025\040\007\041\024\042\017\064\014\001\002" +
    "\000\010\011\263\013\uffa5\016\uffa5\001\002\000\004\064" +
    "\262\001\002\000\004\013\261\001\002\000\010\011\uffa2" +
    "\013\uffa2\016\uffa2\001\002\000\004\020\uffe6\001\002\000" +
    "\010\011\uffa1\013\uffa1\016\uffa1\001\002\000\022\033\027" +
    "\035\012\036\021\037\025\040\007\041\024\042\017\064" +
    "\014\001\002\000\010\011\uffa3\013\uffa3\016\uffa3\001\002" +
    "\000\004\064\uffc4\001\002\000\004\064\uffc3\001\002\000" +
    "\004\064\270\001\002\000\004\015\271\001\002\000\024" +
    "\016\uffa4\033\027\035\012\036\021\037\025\040\007\041" +
    "\024\042\017\064\014\001\002\000\004\016\273\001\002" +
    "\000\004\012\274\001\002\000\066\007\uffed\012\uffed\015" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\042\uffed\051\uffed\062\uffed\063\uffed\064\uffed\065\uffed" +
    "\072\uffed\073\uffed\076\uffed\077\uffed\001\002\000\066\007" +
    "\053\012\076\015\056\024\071\025\063\026\054\027\102" +
    "\030\055\031\062\032\051\033\027\035\012\036\021\037" +
    "\025\040\007\041\024\042\017\051\057\062\060\063\104" +
    "\064\110\065\066\072\101\073\050\076\106\077\077\001" +
    "\002\000\004\020\277\001\002\000\052\007\053\012\076" +
    "\013\ufffd\015\056\024\071\025\063\026\054\027\102\030" +
    "\055\031\062\032\051\051\057\062\060\063\104\064\150" +
    "\065\066\072\101\073\050\076\106\077\077\001\002\000" +
    "\004\013\301\001\002\000\004\020\uffef\001\002\000\034" +
    "\002\ufff4\017\ufff4\021\005\022\006\023\010\033\027\035" +
    "\012\036\021\037\025\040\007\041\024\042\017\064\014" +
    "\001\002\000\006\002\ufff5\017\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\026\002\014\003\022\004\003\013\017\014" +
    "\015\015\021\016\027\021\010\023\025\024\012\001\001" +
    "\000\002\001\001\000\012\021\265\023\025\024\012\025" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\250\023\025\024\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\031" +
    "\022\033\023\025\024\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\031\022\036\023\025\024\012\001\001\000\002\001" +
    "\001\000\012\021\031\022\040\023\025\024\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\243\004" +
    "\003\013\017\014\015\015\021\016\027\021\010\023\025" +
    "\024\012\001\001\000\002\001\001\000\004\012\045\001" +
    "\001\000\046\007\067\013\060\017\074\020\071\021\010" +
    "\023\025\024\012\026\066\030\063\031\102\032\046\035" +
    "\051\044\072\045\077\046\064\047\073\053\104\054\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\017\074\020\071\026\113" +
    "\030\063\031\102\032\046\033\225\034\112\035\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\017\074" +
    "\020\071\026\223\030\063\031\102\032\046\035\051\001" +
    "\001\000\020\017\074\020\071\026\222\030\063\031\102" +
    "\032\046\035\051\001\001\000\020\017\074\020\071\026" +
    "\221\030\063\031\102\032\046\035\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\123" +
    "\001\001\000\002\001\001\000\020\017\074\020\071\026" +
    "\176\030\063\031\102\032\046\035\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\170\001\001\000" +
    "\002\001\001\000\026\017\074\020\071\026\157\030\063" +
    "\031\102\032\046\035\051\036\160\037\161\040\156\001" +
    "\001\000\004\047\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\017\074\020\071\026\113\030" +
    "\063\031\102\032\046\033\114\034\112\035\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\017\074\020\071\026\134\030\063" +
    "\031\102\032\046\035\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\123\001\001\000\020\017\074\020\071" +
    "\026\136\030\063\031\102\032\046\035\051\001\001\000" +
    "\004\027\123\001\001\000\020\017\074\020\071\026\140" +
    "\030\063\031\102\032\046\035\051\001\001\000\004\027" +
    "\123\001\001\000\002\001\001\000\020\017\074\020\071" +
    "\026\143\030\063\031\102\032\046\035\051\001\001\000" +
    "\004\027\123\001\001\000\002\001\001\000\040\006\150" +
    "\007\146\017\074\020\071\026\066\030\063\031\102\032" +
    "\046\035\051\044\072\045\077\046\064\047\073\053\104" +
    "\054\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\006\153\007\146" +
    "\017\074\020\071\026\066\030\063\031\102\032\046\035" +
    "\051\044\072\045\077\046\064\047\073\053\104\054\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\017\074\020\071\026" +
    "\157\030\063\031\102\032\046\035\051\040\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\017\074\020" +
    "\071\026\166\030\063\031\102\032\046\035\051\001\001" +
    "\000\004\027\123\001\001\000\020\017\074\020\071\026" +
    "\171\030\063\031\102\032\046\035\051\001\001\000\002" +
    "\001\001\000\006\011\172\027\123\001\001\000\002\001" +
    "\001\000\020\017\074\020\071\026\174\030\063\031\102" +
    "\032\046\035\051\001\001\000\006\011\175\027\123\001" +
    "\001\000\002\001\001\000\004\027\123\001\001\000\040" +
    "\006\200\007\146\017\074\020\071\026\066\030\063\031" +
    "\102\032\046\035\051\044\072\045\077\046\064\047\073" +
    "\053\104\054\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\017\074\020\071\026\204" +
    "\030\063\031\102\032\046\035\051\001\001\000\004\027" +
    "\123\001\001\000\002\001\001\000\040\006\207\007\146" +
    "\017\074\020\071\026\066\030\063\031\102\032\046\035" +
    "\051\044\072\045\077\046\064\047\073\053\104\054\106" +
    "\001\001\000\006\055\210\056\211\001\001\000\002\001" +
    "\001\000\004\057\214\001\001\000\040\006\217\007\146" +
    "\017\074\020\071\026\066\030\063\031\102\032\046\035" +
    "\051\044\072\045\077\046\064\047\073\053\104\054\106" +
    "\001\001\000\040\006\216\007\146\017\074\020\071\026" +
    "\066\030\063\031\102\032\046\035\051\044\072\045\077" +
    "\046\064\047\073\053\104\054\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\123\001\001\000\004\027" +
    "\123\001\001\000\004\027\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\235\031\234\032\046\035\051" +
    "\047\233\052\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\006\241\007\146\017\074\020" +
    "\071\026\066\030\063\031\102\032\046\035\051\044\072" +
    "\045\077\046\064\047\073\053\104\054\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\247\060\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\251\023\025\024\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\021" +
    "\255\023\025\024\012\041\256\042\254\043\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\255\023\025\024\012\043\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\021\255\023\025\024\012\041" +
    "\271\042\254\043\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\274\001\001\000\046\007\275\013" +
    "\060\017\074\020\071\021\010\023\025\024\012\026\066" +
    "\030\063\031\102\032\046\035\051\044\072\045\077\046" +
    "\064\047\073\053\104\054\106\001\001\000\002\001\001" +
    "\000\040\006\277\007\146\017\074\020\071\026\066\030" +
    "\063\031\102\032\046\035\051\044\072\045\077\046\064" +
    "\047\073\053\104\054\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\302\004\003\013\017\014\015" +
    "\015\021\016\027\021\010\023\025\024\012\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public Boolean syntaxErrors = false;

  public void syntax_error(Symbol current_token){
  report_error("Syntax error at line " + (current_token.left+1) +
  ", column " + current_token.right + "\n", null);
  }
  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declarations main declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= MAIN LBRACE variable_declarations statement SEMICOLON statements RBRACE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statement SEMICOLON statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= io_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= if_start 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= named_ent assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarations ::= declaration SEMICOLON declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration ::= function_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration ::= alias_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= type_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_declaration ::= FDEF ftype IDENTIFIER LPAREN type_id_contents RPAREN LBRACE variable_declarations statement SEMICOLON statements RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variable_declarations ::= variable_declarations variable_declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarations",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variable_declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarations",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variable_declaration ::= type IDENTIFIER initialised 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // initialised ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialised",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // initialised ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialised",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assignment ::= ASSIGNMENT expression multiple_assignments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // multiple_assignments ::= COMMA expression multiple_assignments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignments",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // multiple_assignments ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignments",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_declaration ::= TDEF IDENTIFIER LBRACE type_id_contents RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // alias_declaration ::= ALIAS type type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= collection 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= evaluable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // item ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // item ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // item ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // item ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // item ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // collection ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // collection ::= dict_start 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // collection ::= sequence_start 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // evaluable ::= expression l_r_op expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // evaluable ::= NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // evaluable ::= LEN LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // evaluable ::= MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // evaluable ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // evaluable ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // named_ent ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("named_ent",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // collection_access ::= possible_collections LBRACKET expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection_access",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // possible_collections ::= named_ent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("possible_collections",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // possible_collections ::= collection 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("possible_collections",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // possible_collections ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("possible_collections",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dot_access ::= named_ent DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dot_access",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= BOOLEAN_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= CHAR_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= dict_t 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= FLOAT_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= INT_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= RATIONAL_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= sequence_t 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ftype ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftype",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ftype ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftype",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type_with_top ::= TOP_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_top",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type_with_top ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_top",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // l_r_op ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // l_r_op ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // l_r_op ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // l_r_op ::= IN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // l_r_op ::= LANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // l_r_op ::= LTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // l_r_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // l_r_op ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // l_r_op ::= NEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // l_r_op ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // l_r_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // l_r_op ::= POW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // l_r_op ::= APPEND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_r_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // function_call ::= IDENTIFIER LPAREN sequence_contents RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sequence_t ::= SEQ_T LANGLE type_with_top RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_t",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sequence_start ::= LBRACKET sequence_contents RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_start",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sequence_contents ::= sequence_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_contents",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sequence_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_contents",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sequence_body ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_body",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sequence_body ::= sequence_body COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_body",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dict_t ::= DICT_T LANGLE type_with_top COMMA type_with_top RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_t",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // dict_start ::= LBRACE dict_contents RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_start",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // dict_contents ::= dict_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_contents",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // dict_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_contents",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // dict_body ::= dict_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // dict_body ::= dict_body COMMA dict_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // dict_value ::= expression COLON expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_value",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // type_id_contents ::= type_id_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_contents",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // type_id_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_contents",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // type_id_body ::= type_id_body COMMA type_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_body",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // type_id_body ::= type_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_body",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // type_id ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // while ::= WHILE LPAREN expression RPAREN DO statements OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // for ::= FORALL LPAREN IDENTIFIER IN possible_collections RPAREN DO statements DO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // if_start ::= IF LPAREN expression RPAREN THEN statements if_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_start",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // if_end ::= elif else FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_end",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // elif ::= elif ELIF statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // elif ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // else ::= ELSE statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // else ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // return ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // return ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // io_op ::= PRINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io_op",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // io_op ::= READ named_ent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io_op",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
