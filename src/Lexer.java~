/* The following code was generated by JFlex 1.6.0 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>src/Lexer.lex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;
  public static final int IN_COMMENT = 6;
  public static final int END_L_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  2,  2,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\12\1\12\1\1\22\0\1\3\1\64\1\61"+
    "\3\6\1\63\1\13\1\53\1\54\1\45\1\43\1\65\1\44\1\50"+
    "\1\11\1\10\11\5\1\31\1\66\1\52\1\42\1\51\2\6\5\4"+
    "\1\35\15\4\1\34\1\4\1\4\4\4\1\57\1\6\1\60\1\46"+
    "\1\7\1\6\1\27\1\36\1\37\1\30\1\20\1\15\1\4\1\17"+
    "\1\14\2\4\1\22\1\47\1\21\1\25\1\32\1\40\1\26\1\23"+
    "\1\16\1\33\1\41\1\24\3\4\1\55\1\62\1\56\1\6\6\0"+
    "\1\12\u1fa2\0\1\12\1\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\4\1\6"+
    "\1\1\12\3\1\7\1\3\1\10\1\11\3\3\1\12"+
    "\1\13\1\14\1\15\1\16\1\3\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\1"+
    "\1\31\1\32\1\33\4\0\1\34\1\35\1\36\11\3"+
    "\1\37\4\3\1\40\4\3\1\41\1\3\1\42\1\43"+
    "\4\44\2\45\1\46\1\47\1\3\1\50\2\3\1\51"+
    "\3\3\1\52\3\3\1\53\11\3\1\54\1\55\1\56"+
    "\1\57\1\60\2\3\1\61\1\3\1\62\1\3\1\63"+
    "\1\64\1\65\1\66\1\67\1\3\1\70\1\3\1\71"+
    "\1\72\1\73\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\245\0\u0113\0\u014a"+
    "\0\245\0\u0181\0\245\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294"+
    "\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\245\0\u0415"+
    "\0\u0113\0\u0113\0\u044c\0\u0483\0\u04ba\0\u04f1\0\245\0\245"+
    "\0\245\0\245\0\u0528\0\245\0\245\0\245\0\245\0\245"+
    "\0\245\0\245\0\245\0\245\0\245\0\u055f\0\u0596\0\245"+
    "\0\245\0\245\0\u05cd\0\u0604\0\u063b\0\u0672\0\u0113\0\u06a9"+
    "\0\u0113\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u0113\0\u08cf\0\u0906\0\u093d\0\u0974\0\u0113"+
    "\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\245\0\u0a87\0\245\0\245"+
    "\0\u0abe\0\245\0\u0af5\0\u0b2c\0\u0b63\0\245\0\245\0\u0113"+
    "\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0113\0\u0c76\0\u0cad\0\u0ce4"+
    "\0\u0113\0\u0d1b\0\u0d52\0\u0d89\0\u0113\0\u0dc0\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0113\0\u0113"+
    "\0\u0113\0\u0113\0\u0113\0\u0faf\0\u0fe6\0\u0113\0\u101d\0\u0113"+
    "\0\u1054\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113\0\u108b\0\u0113"+
    "\0\u10c2\0\u0113\0\u0113\0\u0113\0\u0113";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\4\1\11\1\12"+
    "\1\13\1\4\1\14\1\15\1\16\1\17\1\7\1\20"+
    "\2\7\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\7\1\31\1\32\1\33\1\34\1\7\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\61\4\1\55\74\4"+
    "\71\0\1\6\70\0\2\7\1\0\2\7\3\0\15\7"+
    "\1\0\10\7\5\0\1\7\17\0\1\63\2\0\2\63"+
    "\1\10\1\63\1\64\1\10\1\65\1\0\55\63\2\0"+
    "\4\63\1\64\1\63\1\65\1\0\54\63\4\0\5\66"+
    "\2\0\54\66\4\0\2\7\1\0\2\7\3\0\1\7"+
    "\1\67\3\7\1\70\7\7\1\0\10\7\5\0\1\7"+
    "\23\0\2\7\1\0\2\7\3\0\1\71\5\7\1\72"+
    "\2\7\1\73\2\7\1\74\1\0\10\7\5\0\1\7"+
    "\23\0\2\7\1\0\2\7\3\0\3\7\1\75\5\7"+
    "\1\76\2\7\1\77\1\0\10\7\5\0\1\7\23\0"+
    "\2\7\1\0\2\7\3\0\6\7\1\100\6\7\1\0"+
    "\10\7\5\0\1\7\23\0\2\7\1\0\2\7\3\0"+
    "\4\7\1\101\10\7\1\0\10\7\5\0\1\7\23\0"+
    "\2\7\1\0\2\7\3\0\3\7\1\102\11\7\1\0"+
    "\10\7\5\0\1\7\23\0\2\7\1\0\2\7\3\0"+
    "\14\7\1\103\1\0\10\7\5\0\1\7\23\0\2\7"+
    "\1\0\2\7\3\0\4\7\1\104\6\7\1\105\1\7"+
    "\1\0\10\7\5\0\1\7\23\0\2\7\1\0\2\7"+
    "\3\0\6\7\1\106\6\7\1\0\10\7\5\0\1\7"+
    "\23\0\2\7\1\0\2\7\3\0\1\107\10\7\1\110"+
    "\3\7\1\0\10\7\5\0\1\7\23\0\2\7\1\0"+
    "\2\7\3\0\12\7\1\111\2\7\1\0\10\7\5\0"+
    "\1\7\23\0\2\7\1\0\2\7\3\0\11\7\1\112"+
    "\3\7\1\0\10\7\5\0\1\7\23\0\2\7\1\0"+
    "\2\7\3\0\3\7\1\113\11\7\1\0\10\7\5\0"+
    "\1\7\23\0\2\7\1\0\2\7\3\0\11\7\1\114"+
    "\3\7\1\0\10\7\5\0\1\7\61\0\1\115\30\0"+
    "\2\7\1\0\2\7\3\0\13\7\1\116\1\7\1\0"+
    "\10\7\5\0\1\7\101\0\1\117\67\0\1\120\10\0"+
    "\1\121\2\0\1\122\63\0\1\123\2\0\1\124\63\0"+
    "\1\125\2\0\1\126\71\0\1\127\57\0\2\7\1\0"+
    "\2\7\3\0\2\7\1\130\12\7\1\0\10\7\5\0"+
    "\1\7\23\0\2\7\1\0\2\7\3\0\11\7\1\131"+
    "\3\7\1\0\10\7\5\0\1\7\23\0\2\7\1\0"+
    "\2\7\3\0\12\7\1\132\2\7\1\0\10\7\5\0"+
    "\1\7\23\0\2\7\1\0\2\7\3\0\4\7\1\133"+
    "\10\7\1\0\10\7\5\0\1\7\23\0\2\7\1\0"+
    "\2\7\3\0\4\7\1\134\10\7\1\0\10\7\5\0"+
    "\1\7\23\0\2\7\1\0\2\7\3\0\15\7\1\0"+
    "\1\135\7\7\5\0\1\7\23\0\2\7\1\0\2\7"+
    "\3\0\4\7\1\136\10\7\1\0\10\7\5\0\1\7"+
    "\23\0\2\7\1\0\2\7\3\0\1\137\6\7\1\140"+
    "\5\7\1\0\10\7\5\0\1\7\23\0\2\7\1\0"+
    "\2\7\3\0\15\7\1\0\6\7\1\141\1\7\5\0"+
    "\1\7\23\0\2\7\1\0\2\7\3\0\1\142\14\7"+
    "\1\0\10\7\5\0\1\7\23\0\2\7\1\0\2\7"+
    "\3\0\2\7\1\143\10\7\1\144\1\7\1\0\10\7"+
    "\5\0\1\7\23\0\2\7\1\0\2\7\3\0\2\7"+
    "\1\145\12\7\1\0\10\7\5\0\1\7\23\0\2\7"+
    "\1\0\2\7\3\0\1\146\14\7\1\0\10\7\5\0"+
    "\1\7\23\0\2\7\1\0\2\7\3\0\15\7\1\0"+
    "\5\7\1\147\2\7\5\0\1\7\23\0\2\7\1\0"+
    "\2\7\3\0\1\150\14\7\1\0\10\7\5\0\1\7"+
    "\23\0\2\7\1\0\2\7\3\0\11\7\1\151\3\7"+
    "\1\0\10\7\5\0\1\7\23\0\2\7\1\0\2\7"+
    "\3\0\13\7\1\152\1\7\1\0\10\7\5\0\1\7"+
    "\23\0\2\7\1\0\2\7\3\0\1\153\14\7\1\0"+
    "\10\7\5\0\1\7\23\0\2\7\1\0\2\7\3\0"+
    "\1\154\14\7\1\0\10\7\5\0\1\7\24\0\1\121"+
    "\2\0\1\121\63\0\1\123\2\0\1\123\1\65\66\0"+
    "\1\65\62\0\1\125\2\0\1\125\62\0\2\7\1\0"+
    "\2\7\3\0\13\7\1\155\1\7\1\0\10\7\5\0"+
    "\1\7\23\0\2\7\1\0\2\7\3\0\13\7\1\156"+
    "\1\7\1\0\10\7\5\0\1\7\23\0\2\7\1\0"+
    "\2\7\3\0\1\7\1\157\13\7\1\0\10\7\5\0"+
    "\1\7\23\0\2\7\1\0\2\7\3\0\5\7\1\160"+
    "\7\7\1\0\10\7\5\0\1\7\23\0\2\7\1\0"+
    "\2\7\3\0\1\7\1\161\13\7\1\0\10\7\5\0"+
    "\1\7\23\0\2\7\1\0\2\7\3\0\1\7\1\162"+
    "\13\7\1\0\10\7\5\0\1\7\23\0\2\7\1\0"+
    "\2\7\3\0\4\7\1\163\10\7\1\0\10\7\5\0"+
    "\1\7\23\0\2\7\1\0\2\7\3\0\6\7\1\164"+
    "\6\7\1\0\10\7\5\0\1\7\23\0\2\7\1\0"+
    "\2\7\3\0\15\7\1\0\1\7\1\165\6\7\5\0"+
    "\1\7\23\0\2\7\1\0\2\7\3\0\14\7\1\166"+
    "\1\0\10\7\5\0\1\7\23\0\2\7\1\0\2\7"+
    "\3\0\13\7\1\167\1\7\1\0\10\7\5\0\1\7"+
    "\23\0\2\7\1\0\2\7\3\0\2\7\1\170\12\7"+
    "\1\0\10\7\5\0\1\7\23\0\2\7\1\0\2\7"+
    "\3\0\5\7\1\171\7\7\1\0\10\7\5\0\1\7"+
    "\23\0\2\7\1\0\2\7\3\0\6\7\1\172\6\7"+
    "\1\0\10\7\5\0\1\7\23\0\2\7\1\0\2\7"+
    "\3\0\12\7\1\173\2\7\1\0\10\7\5\0\1\7"+
    "\23\0\2\7\1\0\2\7\3\0\14\7\1\174\1\0"+
    "\10\7\5\0\1\7\23\0\2\7\1\0\2\7\3\0"+
    "\5\7\1\175\7\7\1\0\10\7\5\0\1\7\23\0"+
    "\2\7\1\0\2\7\3\0\2\7\1\176\12\7\1\0"+
    "\10\7\5\0\1\7\23\0\2\7\1\0\2\7\3\0"+
    "\6\7\1\177\6\7\1\0\10\7\5\0\1\7\23\0"+
    "\2\7\1\0\2\7\3\0\4\7\1\200\10\7\1\0"+
    "\10\7\5\0\1\7\23\0\2\7\1\0\2\7\3\0"+
    "\12\7\1\201\2\7\1\0\10\7\5\0\1\7\23\0"+
    "\2\7\1\0\2\7\3\0\7\7\1\202\5\7\1\0"+
    "\10\7\5\0\1\7\23\0\2\7\1\0\2\7\3\0"+
    "\2\7\1\203\12\7\1\0\10\7\5\0\1\7\23\0"+
    "\2\7\1\0\2\7\3\0\6\7\1\204\6\7\1\0"+
    "\10\7\5\0\1\7\23\0\2\7\1\0\2\7\3\0"+
    "\5\7\1\205\7\7\1\0\10\7\5\0\1\7\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4345];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\13\1\1\11\7\1\4\11\1\1\12\11\2\1\3\11"+
    "\4\0\26\1\1\11\1\1\2\11\1\1\1\11\3\1"+
    "\2\11\56\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private boolean debug_mode;
  public  boolean debug()            { return debug_mode; }
  public  void    debug(boolean mode){ debug_mode = mode; }

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [131] { System.out.println(\"file:\" + (yyline+1) +"+ZZ_NL+"    \":0: Error: Invalid input \'\" + yytext()+\"\'\");"+ZZ_NL+"  return symbol(sym.BADCHAR); }");
          { System.out.println("file:" + (yyline+1) +
    ":0: Error: Invalid input '" + yytext()+"'");
  return symbol(sym.BADCHAR);
          }
        case 61: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [92] { /* do nothing */ }");
          { /* do nothing */
          }
        case 62: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [124] { return symbol(sym.IDENTIFIER, yytext()); }");
          { return symbol(sym.IDENTIFIER, yytext());
          }
        case 63: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [64] { return symbol(sym.INTEGER,"+ZZ_NL+"                    Integer.parseInt(yytext())); }");
          { return symbol(sym.INTEGER,
                    Integer.parseInt(yytext()));
          }
        case 64: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [101] { return symbol(sym.UNDERSCORE); }");
          { return symbol(sym.UNDERSCORE);
          }
        case 65: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [99] { return symbol(sym.DIV); }");
          { return symbol(sym.DIV);
          }
        case 66: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [53] { return symbol(sym.COLON); }");
          { return symbol(sym.COLON);
          }
        case 67: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [74] { return symbol(sym.T); }");
          { return symbol(sym.T);
          }
        case 68: break;
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [75] { return symbol(sym.F); }");
          { return symbol(sym.F);
          }
        case 69: break;
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [95] { return symbol(sym.ASSIGNMENT); }");
          { return symbol(sym.ASSIGNMENT);
          }
        case 70: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [96] { return symbol(sym.PLUS); }");
          { return symbol(sym.PLUS);
          }
        case 71: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [97] { return symbol(sym.MINUS); }");
          { return symbol(sym.MINUS);
          }
        case 72: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [98] { return symbol(sym.MULT); }");
          { return symbol(sym.MULT);
          }
        case 73: break;
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [100] { return symbol(sym.POW); }");
          { return symbol(sym.POW);
          }
        case 74: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [103] { return symbol(sym.PERIOD); }");
          { return symbol(sym.PERIOD);
          }
        case 75: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [107] { return symbol(sym.GREATER_THAN); }");
          { return symbol(sym.GREATER_THAN);
          }
        case 76: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [108] { return symbol(sym.LESS_THAN); }");
          { return symbol(sym.LESS_THAN);
          }
        case 77: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [111] { return symbol(sym.LPAREN); }");
          { return symbol(sym.LPAREN);
          }
        case 78: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [112] { return symbol(sym.RPAREN); }");
          { return symbol(sym.RPAREN);
          }
        case 79: break;
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [113] { return symbol(sym.LBRACE); }");
          { return symbol(sym.LBRACE);
          }
        case 80: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [114] { return symbol(sym.RBRACE); }");
          { return symbol(sym.RBRACE);
          }
        case 81: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [115] { return symbol(sym.LBRACKET); }");
          { return symbol(sym.LBRACKET);
          }
        case 82: break;
        case 23: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [116] { return symbol(sym.RBRACKET); }");
          { return symbol(sym.RBRACKET);
          }
        case 83: break;
        case 24: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [117] { return symbol(sym.STRINGTERM); }");
          { return symbol(sym.STRINGTERM);
          }
        case 84: break;
        case 25: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [120] { return symbol(sym.NOT); }");
          { return symbol(sym.NOT);
          }
        case 85: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [121] { return symbol(sym.COMMA); }");
          { return symbol(sym.COMMA);
          }
        case 86: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [122] { return symbol(sym.SEMICOL); }");
          { return symbol(sym.SEMICOL);
          }
        case 87: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [42] { return symbol(sym.IF); }");
          { return symbol(sym.IF);
          }
        case 88: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [54] { return symbol(sym.IN); }");
          { return symbol(sym.IN);
          }
        case 89: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [46] { return symbol(sym.FI); }");
          { return symbol(sym.FI);
          }
        case 90: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [52] { return symbol(sym.OD); }");
          { return symbol(sym.OD);
          }
        case 91: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [51] { return symbol(sym.DO); }");
          { return symbol(sym.DO);
          }
        case 92: break;
        case 33: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [106] { return symbol(sym.EQUALITY); }");
          { return symbol(sym.EQUALITY);
          }
        case 93: break;
        case 34: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [118] { return symbol(sym.OR); }");
          { return symbol(sym.OR);
          }
        case 94: break;
        case 35: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [119] { return symbol(sym.AND); }");
          { return symbol(sym.AND);
          }
        case 95: break;
        case 36: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [66] { return symbol(sym.FLOAT); }");
          { return symbol(sym.FLOAT);
          }
        case 96: break;
        case 37: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [63] { return symbol(sym.RATIONAL); }");
          { return symbol(sym.RATIONAL);
          }
        case 97: break;
        case 38: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [68] { return symbol("+ZZ_NL+"                      sym.CHAR,"+ZZ_NL+"                      yytext()); }");
          { return symbol(
                      sym.CHAR,
                      yytext());
          }
        case 98: break;
        case 39: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [86] { return symbol(sym.INT_T); }");
          { return symbol(sym.INT_T);
          }
        case 99: break;
        case 40: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [49] { return symbol(sym.FOR); }");
          { return symbol(sym.FOR);
          }
        case 100: break;
        case 41: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [81] { return symbol(sym.TOP); }");
          { return symbol(sym.TOP);
          }
        case 101: break;
        case 42: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [88] { return symbol(sym.SEQ_T); }");
          { return symbol(sym.SEQ_T);
          }
        case 102: break;
        case 43: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [87] { return symbol(sym.RATIONAL_T); }");
          { return symbol(sym.RATIONAL_T);
          }
        case 103: break;
        case 44: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [60] { return symbol(sym.FDEF); }");
          { return symbol(sym.FDEF);
          }
        case 104: break;
        case 45: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [43] { return symbol(sym.THEN); }");
          { return symbol(sym.THEN);
          }
        case 105: break;
        case 46: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [61] { return symbol(sym.TDEF); }");
          { return symbol(sym.TDEF);
          }
        case 106: break;
        case 47: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [45] { return symbol(sym.ELIF); }");
          { return symbol(sym.ELIF);
          }
        case 107: break;
        case 48: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [44] { return symbol(sym.ELSE); }");
          { return symbol(sym.ELSE);
          }
        case 108: break;
        case 49: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [57] { return symbol(sym.READ); }");
          { return symbol(sym.READ);
          }
        case 109: break;
        case 50: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [84] { return symbol(sym.DICT_T); }");
          { return symbol(sym.DICT_T);
          }
        case 110: break;
        case 51: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [82] { return symbol(sym.BOOLEAN_T); }");
          { return symbol(sym.BOOLEAN_T);
          }
        case 111: break;
        case 52: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [83] { return symbol(sym.CHAR_T); }");
          { return symbol(sym.CHAR_T);
          }
        case 112: break;
        case 53: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [89] { return symbol(sym.VOID_T); }");
          { return symbol(sym.VOID_T);
          }
        case 113: break;
        case 54: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [102] { return symbol(sym.MAIN); }");
          { return symbol(sym.MAIN);
          }
        case 114: break;
        case 55: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [85] { return symbol(sym.FLOAT_T); }");
          { return symbol(sym.FLOAT_T);
          }
        case 115: break;
        case 56: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [48] { return symbol(sym.WHILE); }");
          { return symbol(sym.WHILE);
          }
        case 116: break;
        case 57: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [76] { return symbol(sym.ALIAS); }");
          { return symbol(sym.ALIAS);
          }
        case 117: break;
        case 58: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [56] { return symbol(sym.PRINT); }");
          { return symbol(sym.PRINT);
          }
        case 118: break;
        case 59: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [50] { return symbol(sym.FORALL); }");
          { return symbol(sym.FORALL);
          }
        case 119: break;
        case 60: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [58] { return symbol(sym.RETURN); }");
          { return symbol(sym.RETURN);
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
