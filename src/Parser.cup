import java_cup.runtime.*;
import java.util.ArrayList;

parser code {:

  public Boolean syntaxErrors = false;

  public void syntax_error(Symbol current_token){
  report_error("Syntax error at line " + (current_token.left+1) +
  ", column " + current_token.right + "\n", null);
  }
  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }

:}

terminal BADCHAR;
/** primitives **/
  /* syntactic smybols */
  terminal LANGLE, RANGLE, LBRACKET, RBRACKET, COMMA, LBRACE, RBRACE,
  COLON, LPAREN, RPAREN, MAIN, SEMICOLON, FDEF, TDEF, ALIAS, RETURN;
  /* items */
  terminal BOOL, CHAR, FLOAT, INTEGER, RATIONAL;
  /* collections */
  terminal STRING_LITERAL;
  /* language types */
  terminal SEQ_T, TOP_T, BOOLEAN_T, CHAR_T, DICT_T, FLOAT_T, INT_T,
  RATIONAL_T, VOID;
/* operators */
  terminal AND, DIV, EQ, IN, LTEQ, MINUS, MULT, NEQ, OR
, PLUS, ASSIGNMENT, POW, DOT, APPEND, NOT, LEN, IDENTIFIER;
  terminal IF, FI, ELIF, DO, OD, WHILE, FORALL, ELSE, THEN, PRINT,
  READ;
/** parsing constructs **/
  /* structural constructs */
  nonterminal program;
  /* declarations */
  nonterminal declarations, declaration, main, statements, statement,
  multiple_assignments;
  nonterminal variable_declaration, function_declaration,
  type_declaration, alias_declaration;
  /* low level constructs */
  nonterminal collection, item, type, type_with_top_id, dict_t, sequence_t,
  ftype;
  nonterminal expression, evaluable, function_call;
  /* list nonterminals */
  nonterminal sequence_start, sequence_contents, sequence_body,
  dict_start, dict_contents, dict_body, dict_value,
  type_id_contents, type_id_body, type_id;
  /* conditional flow nonterminals */
  nonterminal while, for;
  /* io_ops */
  nonterminal io_op, dot_access,
  return, if, elif, else, settable, index_access,
  slice;

// we probably can do this to resolve variable declaration issues
// precedence IDENTIFIER;
precedence left PLUS, MINUS, OR, APPEND, COMMA;
precedence left MULT, DIV, AND;
precedence right POW, IN, ASSIGNMENT;
precedence nonassoc NOT, LANGLE, LTEQ, RANGLE, EQ, NEQ;

start with program;

program ::= declarations main declarations;
// potentiall add variable declarations to start only
main ::= MAIN LBRACE statement statements RBRACE SEMICOLON;

statements ::= statements statement
            |
            ;

// possible two ways to reach identifier
statement ::= io_op SEMICOLON
            | return SEMICOLON
            | expression SEMICOLON
            | settable ASSIGNMENT multiple_assignments SEMICOLON
            | variable_declaration SEMICOLON
            | if
            | while
            | for
            ;

declarations ::= declaration SEMICOLON declarations
              |
              ;

declaration ::= function_declaration
              | variable_declaration
              | alias_declaration
              | type_declaration
              ;

function_declaration ::= FDEF ftype IDENTIFIER LPAREN type_id_contents
                      RPAREN LBRACE statement statements RBRACE;

variable_declaration ::= type IDENTIFIER ASSIGNMENT multiple_assignments
                      | IDENTIFIER IDENTIFIER ASSIGNMENT multiple_assignments
                      | type IDENTIFIER
                      | IDENTIFIER IDENTIFIER
                      ;

multiple_assignments ::= multiple_assignments COMMA expression
                      | expression
                      ;


type_declaration ::= TDEF IDENTIFIER LBRACE type_id_contents RBRACE;
alias_declaration ::= ALIAS type IDENTIFIER;

// expression can resolve to IDENTIFIER through
// settable -> index_access -> IDENTIFIER

expression ::= item
            | collection
            | evaluable
            | slice
            | settable
            ;

slice ::= index_access LBRACKET expression COLON expression RBRACKET
        | index_access LBRACKET COLON expression RBRACKET
        | index_access LBRACKET expression COLON RBRACKET
        | index_access LBRACKET COLON RBRACKET
        ;

settable ::= dot_access
        | index_access
        ;

dot_access ::= expression DOT IDENTIFIER;
index_access ::= index_access LBRACKET expression RBRACKET
              | IDENTIFIER
              ;

item ::= CHAR | FLOAT | INTEGER | RATIONAL | BOOL;
collection ::= STRING_LITERAL
            | dict_start
            | sequence_start
            ;

evaluable ::= NOT expression
            | LEN LPAREN expression RPAREN
            | MINUS expression
            | LPAREN expression RPAREN
            | function_call
            | expression AND expression
            | expression DIV expression
            | expression EQ expression
            | expression IN expression
            | expression LANGLE expression
            | expression LTEQ expression
            | expression MINUS expression
            | expression MULT expression
            | expression NEQ expression
            | expression OR expression
            | expression PLUS expression
            | expression POW expression
            | expression APPEND expression
            ;

type ::= BOOLEAN_T | CHAR_T | dict_t | FLOAT_T | INT_T | RATIONAL_T | sequence_t;
ftype ::= IDENTIFIER | VOID | type;
type_with_top_id ::= TOP_T | type | IDENTIFIER;

function_call ::= IDENTIFIER LPAREN sequence_contents RPAREN;


sequence_t ::= SEQ_T LANGLE type_with_top_id RANGLE
            | SEQ_T LANGLE IDENTIFIER RANGLE;

sequence_start ::= LBRACKET sequence_contents RBRACKET;
sequence_contents ::= sequence_body
                |
                ;

sequence_body ::= expression
                | sequence_body COMMA expression
                ;

dict_t ::= DICT_T LANGLE type_with_top_id COMMA type_with_top_id RANGLE
         ;

dict_start ::= LBRACE dict_contents RBRACE;
dict_contents ::= dict_body
              |
              ;


dict_body ::= dict_value
          | dict_body COMMA dict_value
          ;

dict_value ::= expression COLON expression;

type_id_contents ::= type_id_body
                  |
                  ;

type_id_body ::= type_id_body COMMA type_id
              | type_id
              ;

type_id ::= type IDENTIFIER
          | IDENTIFIER IDENTIFIER
          ;

while ::= WHILE LPAREN expression RPAREN DO statements OD;
for ::= FORALL LPAREN IDENTIFIER IN collection RPAREN DO
statements OD
| FORALL LPAREN IDENTIFIER IN IDENTIFIER RPAREN DO
statements OD;
if::= IF LPAREN expression RPAREN THEN statements elif else FI;
elif ::= elif ELIF LPAREN expression RPAREN THEN statements
      |
      ;
else ::= ELSE statements
      |
      ;

return ::= RETURN expression
        | RETURN
        ;

io_op ::= PRINT expression
      | READ settable
      ;
