import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};

parser code {:

  public Boolean syntaxErrors = false;

  public void syntax_error(Symbol current_token){
  report_error("Syntax error at line " + (current_token.left+1) +
  ", column " + current_token.right + "\n", null);
  }

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }

:};

// define the set of atomic terminal types
terminal BOOLEAN_T, CHAR_T, DICT_, FLOAT_T, INT_T, RATIONAL_T, SEQ_T,
TOP_T, VOID_T, DICT_T;

// set of operators
terminal PLUS, MINUS, MULT, DIV,  POW;

// set of formatted data types
terminal FLOAT, INTEGER, STRING_LITERAL, IDENTIFIER, CHAR, T, F,
RATIONAL;
// bracket symbols
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET;

// logical flow keywords
terminal DO, OD, IF, FI, FOR, FORALL, THEN, ELSE, WHILE, ELIF, RETURN;

// language keywords
terminal FDEF, TDEF, READ, PRINT, COLON, IN, SEMICOLON, APPEND, GT,
UNDERSCORE, PERIOD, COMMA, LEN, ASSIGNMENT, ALIAS;

// Comparsion operators
terminal LTEQ, NEQ, EQ, LT;
// logical comparison operators
terminal OR, AND, NOT;


terminal MAIN;

terminal BADCHAR;

nonterminal  program, main;
nonterminal function_body, function_def, functions, parameter_list;
nonterminal vardeclaration, funcdeclaration, typedeclaration, alias;
nonterminal statements, statement;
nonterminal sequence, type;
nonterminal full_exp, simple_exp, operator;

precedence left PLUS, MINUS;
precedence left DIV, MULT;

start with program;

// program main body can come before and after other declarations but
// there can only be one, like in Highlander
program ::= declarations main declarations;
declarations ::= declaration SEMICOL declarations
declaration  ::= vardeclaration
              |  funcdeclaration
              |  typedeclaratiion
              |  alias

main ::= MAIN LBRACE function_body RBRACE;

functions ::=  function_def functions | FDEF;
function_def ::= FDEF type IDENTIFIER LPAREN parameter_list RPAREN function_body LBRACE RBRACE;
function_body ::= statement;
statement ::= SEMICOLON;


sequence ::= SEQ_T LT type GT;
type ::= IDENTIFIER // Identifier since alias can map types to names
      | TOP_T
      | BOOLEAN_T
      | CHAR_T
      | DICT_T
      | FLOAT_T
      | INT_T
      | RATIONAL_T
      | SEQ_T
      | VOID_T;
